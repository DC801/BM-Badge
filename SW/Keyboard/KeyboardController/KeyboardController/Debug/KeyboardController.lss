
KeyboardController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00803800  00001c38  00001cec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001be4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  00009be4  00001be4  00001c98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000003a  0080382a  0080382a  00001d16  2**0
                  ALLOC
  4 .comment      00000060  00000000  00000000  00001d16  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d78  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000003f8  00000000  00000000  00001db8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000092e3  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002e40  00000000  00000000  0000b493  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002124  00000000  00000000  0000e2d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000764  00000000  00000000  000103f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003066  00000000  00000000  00010b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002743  00000000  00000000  00013bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002e8  00000000  00000000  00016305  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_6>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 90 03 	jmp	0x720	; 0x720 <__vector_20>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__vector_22>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__vector_24>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e8 e3       	ldi	r30, 0x38	; 56
      90:	fc e1       	ldi	r31, 0x1C	; 28
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	aa 32       	cpi	r26, 0x2A	; 42
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	28 e3       	ldi	r18, 0x38	; 56
      a0:	aa e2       	ldi	r26, 0x2A	; 42
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a4 36       	cpi	r26, 0x64	; 100
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 9b 02 	call	0x536	; 0x536 <main>
      b2:	0c 94 f0 0d 	jmp	0x1be0	; 0x1be0 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <ts_getY>:
// Xp - input, sense here
// Xm - input
//
// Returns the 8 MSB of the ADC value
//
uint8_t ts_getY(void){
      ba:	cf 92       	push	r12
      bc:	df 92       	push	r13
      be:	ef 92       	push	r14
      c0:	ff 92       	push	r15
      c2:	0f 93       	push	r16
      c4:	1f 93       	push	r17
      c6:	cf 93       	push	r28
      c8:	df 93       	push	r29
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
      ca:	40 98       	cbi	0x08, 0	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
      cc:	e0 e5       	ldi	r30, 0x50	; 80
      ce:	f4 e0       	ldi	r31, 0x04	; 4
      d0:	80 81       	ld	r24, Z
      d2:	87 7f       	andi	r24, 0xF7	; 247
      d4:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
      d6:	48 98       	cbi	0x09, 0	; 9
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
      d8:	42 98       	cbi	0x08, 2	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
      da:	0f 2e       	mov	r0, r31
      dc:	f2 e5       	ldi	r31, 0x52	; 82
      de:	ef 2e       	mov	r14, r31
      e0:	f4 e0       	ldi	r31, 0x04	; 4
      e2:	ff 2e       	mov	r15, r31
      e4:	f0 2d       	mov	r31, r0
      e6:	f7 01       	movw	r30, r14
      e8:	80 81       	ld	r24, Z
      ea:	87 7f       	andi	r24, 0xF7	; 247
      ec:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
      ee:	4a 98       	cbi	0x09, 2	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
      f0:	41 9a       	sbi	0x08, 1	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
      f2:	01 e5       	ldi	r16, 0x51	; 81
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	f8 01       	movw	r30, r16
      f8:	80 81       	ld	r24, Z
      fa:	87 7f       	andi	r24, 0xF7	; 247
      fc:	80 83       	st	Z, r24
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
      fe:	49 9a       	sbi	0x09, 1	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     100:	43 9a       	sbi	0x08, 3	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     102:	c3 e5       	ldi	r28, 0x53	; 83
     104:	d4 e0       	ldi	r29, 0x04	; 4
     106:	88 81       	ld	r24, Y
     108:	87 7f       	andi	r24, 0xF7	; 247
     10a:	88 83       	st	Y, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     10c:	4b 98       	cbi	0x09, 3	; 9
	Yp_set_level(true);
	Ym_set_dir(PORT_DIR_OUT);
	Ym_set_pull_mode(PORT_PULL_OFF);
	Ym_set_level(false);
	
	ADC_0_measurement = ADC_0_get_conversion(ADC_Xp);
     10e:	86 e0       	ldi	r24, 0x06	; 6
     110:	0e 94 c6 03 	call	0x78c	; 0x78c <ADC_0_get_conversion>
     114:	6c 01       	movw	r12, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     116:	40 9a       	sbi	0x08, 0	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     118:	48 98       	cbi	0x09, 0	; 9
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     11a:	f7 01       	movw	r30, r14
     11c:	80 81       	ld	r24, Z
     11e:	88 60       	ori	r24, 0x08	; 8
     120:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     122:	4a 98       	cbi	0x09, 2	; 9
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     124:	f8 01       	movw	r30, r16
     126:	80 81       	ld	r24, Z
     128:	88 60       	ori	r24, 0x08	; 8
     12a:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     12c:	49 98       	cbi	0x09, 1	; 9
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     12e:	88 81       	ld	r24, Y
     130:	88 60       	ori	r24, 0x08	; 8
     132:	88 83       	st	Y, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     134:	4b 98       	cbi	0x09, 3	; 9
	Yp_set_level(false);
	Ym_set_dir(PORT_DIR_OFF);
	Ym_set_level(false);

	// Get 8 MSB of conversion result
	return ADC_0_measurement >> (ADC_0_get_resolution() - 8);
     136:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ADC_0_get_resolution>
     13a:	88 50       	subi	r24, 0x08	; 8
     13c:	96 01       	movw	r18, r12
     13e:	02 c0       	rjmp	.+4      	; 0x144 <__EEPROM_REGION_LENGTH__+0x44>
     140:	36 95       	lsr	r19
     142:	27 95       	ror	r18
     144:	8a 95       	dec	r24
     146:	e2 f7       	brpl	.-8      	; 0x140 <__EEPROM_REGION_LENGTH__+0x40>
     148:	c9 01       	movw	r24, r18
	
}
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	1f 91       	pop	r17
     150:	0f 91       	pop	r16
     152:	ff 90       	pop	r15
     154:	ef 90       	pop	r14
     156:	df 90       	pop	r13
     158:	cf 90       	pop	r12
     15a:	08 95       	ret

0000015c <ts_getX>:
// Xp - 3.2v
// Xm - GND
//
// Returns the 8 MSB of the ADC value
//
uint8_t ts_getX(void){
     15c:	cf 92       	push	r12
     15e:	df 92       	push	r13
     160:	ef 92       	push	r14
     162:	ff 92       	push	r15
     164:	0f 93       	push	r16
     166:	1f 93       	push	r17
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     16c:	40 9a       	sbi	0x08, 0	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     16e:	e0 e5       	ldi	r30, 0x50	; 80
     170:	f4 e0       	ldi	r31, 0x04	; 4
     172:	80 81       	ld	r24, Z
     174:	87 7f       	andi	r24, 0xF7	; 247
     176:	80 83       	st	Z, r24
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     178:	48 9a       	sbi	0x09, 0	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     17a:	42 9a       	sbi	0x08, 2	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     17c:	0f 2e       	mov	r0, r31
     17e:	f2 e5       	ldi	r31, 0x52	; 82
     180:	ef 2e       	mov	r14, r31
     182:	f4 e0       	ldi	r31, 0x04	; 4
     184:	ff 2e       	mov	r15, r31
     186:	f0 2d       	mov	r31, r0
     188:	f7 01       	movw	r30, r14
     18a:	80 81       	ld	r24, Z
     18c:	87 7f       	andi	r24, 0xF7	; 247
     18e:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     190:	4a 98       	cbi	0x09, 2	; 9
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     192:	41 98       	cbi	0x08, 1	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     194:	01 e5       	ldi	r16, 0x51	; 81
     196:	14 e0       	ldi	r17, 0x04	; 4
     198:	f8 01       	movw	r30, r16
     19a:	80 81       	ld	r24, Z
     19c:	87 7f       	andi	r24, 0xF7	; 247
     19e:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     1a0:	49 98       	cbi	0x09, 1	; 9
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     1a2:	43 98       	cbi	0x08, 3	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     1a4:	c3 e5       	ldi	r28, 0x53	; 83
     1a6:	d4 e0       	ldi	r29, 0x04	; 4
     1a8:	88 81       	ld	r24, Y
     1aa:	87 7f       	andi	r24, 0xF7	; 247
     1ac:	88 83       	st	Y, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     1ae:	4b 98       	cbi	0x09, 3	; 9
	Yp_set_level(false);
	Ym_set_dir(PORT_DIR_IN);
	Ym_set_pull_mode(PORT_PULL_OFF);
	Ym_set_level(false);
	
	ADC_0_measurement = ADC_0_get_conversion(ADC_Yp);
     1b0:	87 e0       	ldi	r24, 0x07	; 7
     1b2:	0e 94 c6 03 	call	0x78c	; 0x78c <ADC_0_get_conversion>
     1b6:	6c 01       	movw	r12, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     1b8:	40 9a       	sbi	0x08, 0	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     1ba:	48 98       	cbi	0x09, 0	; 9
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     1bc:	f7 01       	movw	r30, r14
     1be:	80 81       	ld	r24, Z
     1c0:	88 60       	ori	r24, 0x08	; 8
     1c2:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     1c4:	4a 98       	cbi	0x09, 2	; 9
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     1c6:	f8 01       	movw	r30, r16
     1c8:	80 81       	ld	r24, Z
     1ca:	88 60       	ori	r24, 0x08	; 8
     1cc:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     1ce:	49 98       	cbi	0x09, 1	; 9
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     1d0:	88 81       	ld	r24, Y
     1d2:	88 60       	ori	r24, 0x08	; 8
     1d4:	88 83       	st	Y, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     1d6:	4b 98       	cbi	0x09, 3	; 9
	Yp_set_level(false);
	Ym_set_dir(PORT_DIR_OFF);
	Ym_set_level(false);

	// Get 8 MSB of conversion result
	return ADC_0_measurement >> (ADC_0_get_resolution() - 8);
     1d8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ADC_0_get_resolution>
     1dc:	88 50       	subi	r24, 0x08	; 8
     1de:	96 01       	movw	r18, r12
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <ts_getX+0x8a>
     1e2:	36 95       	lsr	r19
     1e4:	27 95       	ror	r18
     1e6:	8a 95       	dec	r24
     1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <ts_getX+0x86>
     1ea:	c9 01       	movw	r24, r18
		
}
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	1f 91       	pop	r17
     1f2:	0f 91       	pop	r16
     1f4:	ff 90       	pop	r15
     1f6:	ef 90       	pop	r14
     1f8:	df 90       	pop	r13
     1fa:	cf 90       	pop	r12
     1fc:	08 95       	ret

000001fe <__vector_6>:

#include <driver_init.h>
#include <compiler.h>

ISR(RTC_CNT_vect)
{
     1fe:	1f 92       	push	r1
     200:	0f 92       	push	r0
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	0f 92       	push	r0
     206:	11 24       	eor	r1, r1
     208:	2f 93       	push	r18
     20a:	3f 93       	push	r19
     20c:	4f 93       	push	r20
     20e:	5f 93       	push	r21
     210:	6f 93       	push	r22
     212:	7f 93       	push	r23
     214:	8f 93       	push	r24
     216:	9f 93       	push	r25
     218:	af 93       	push	r26
     21a:	bf 93       	push	r27
     21c:	ef 93       	push	r30
     21e:	ff 93       	push	r31

	/* Insert your RTC Compare interrupt handling code */
	touch_timer_handler();
     220:	0e 94 6f 03 	call	0x6de	; 0x6de <touch_timer_handler>

	/* Compare interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_CMP_bm;
     224:	82 e0       	ldi	r24, 0x02	; 2
     226:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <gain_setting_int_cap+0x7f6511>
}
     22a:	ff 91       	pop	r31
     22c:	ef 91       	pop	r30
     22e:	bf 91       	pop	r27
     230:	af 91       	pop	r26
     232:	9f 91       	pop	r25
     234:	8f 91       	pop	r24
     236:	7f 91       	pop	r23
     238:	6f 91       	pop	r22
     23a:	5f 91       	pop	r21
     23c:	4f 91       	pop	r20
     23e:	3f 91       	pop	r19
     240:	2f 91       	pop	r18
     242:	0f 90       	pop	r0
     244:	0f be       	out	0x3f, r0	; 63
     246:	0f 90       	pop	r0
     248:	1f 90       	pop	r1
     24a:	18 95       	reti

0000024c <I2C_0_stop_handler>:
	I2C_0_register_address = I2C_0_read();
	I2C_0_send_ack(); // or send_nack() if we don't want to receive more data
}

void I2C_0_stop_handler(){
	counter = 0;
     24c:	10 92 2a 38 	sts	0x382A, r1	; 0x80382a <__data_end>
     250:	08 95       	ret

00000252 <I2C_0_error_handler>:
}

void I2C_0_error_handler(){
     252:	08 95       	ret

00000254 <I2C_0_address_handler>:
volatile uint8_t I2C_0_register_address;

int8_t counter = 0;

void I2C_0_address_handler(){
	I2C_0_slave_address = I2C_0_read();
     254:	0e 94 50 05 	call	0xaa0	; 0xaa0 <I2C_0_read>
     258:	80 93 3f 38 	sts	0x383F, r24	; 0x80383f <I2C_0_slave_address>
	I2C_0_send_ack();
     25c:	0e 94 5a 05 	call	0xab4	; 0xab4 <I2C_0_send_ack>
	
	 counter = 0;
     260:	10 92 2a 38 	sts	0x382A, r1	; 0x80382a <__data_end>
     264:	08 95       	ret

00000266 <I2C_0_write_handler>:
	I2C_0_send_ack();
}

void I2C_0_write_handler(){
	// Master write handler
	I2C_0_register_address = I2C_0_read();
     266:	0e 94 50 05 	call	0xaa0	; 0xaa0 <I2C_0_read>
     26a:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <I2C_0_register_address>
	I2C_0_send_ack(); // or send_nack() if we don't want to receive more data
     26e:	0e 94 5a 05 	call	0xab4	; 0xab4 <I2C_0_send_ack>
     272:	08 95       	ret

00000274 <I2C_0_read_handler>:
	//else{
		//I2C_0_write((char)lastKey + 1);
	//}
	
	// Send the proper buttonState byte
	if(counter > 5){
     274:	e0 91 2a 38 	lds	r30, 0x382A	; 0x80382a <__data_end>
     278:	e6 30       	cpi	r30, 0x06	; 6
     27a:	24 f0       	brlt	.+8      	; 0x284 <I2C_0_read_handler+0x10>
		I2C_0_write(0);
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <I2C_0_write>
     282:	0d c0       	rjmp	.+26     	; 0x29e <I2C_0_read_handler+0x2a>
	}
	else{
		I2C_0_write(keyState[counter]);
     284:	0e 2e       	mov	r0, r30
     286:	00 0c       	add	r0, r0
     288:	ff 0b       	sbc	r31, r31
     28a:	e5 5d       	subi	r30, 0xD5	; 213
     28c:	f7 4c       	sbci	r31, 0xC7	; 199
     28e:	80 81       	ld	r24, Z
     290:	0e 94 53 05 	call	0xaa6	; 0xaa6 <I2C_0_write>
		counter++;
     294:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <__data_end>
     298:	8f 5f       	subi	r24, 0xFF	; 255
     29a:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <__data_end>
	}
	
	//lastKey = KEY_NONE;
	I2C_0_send_ack();
     29e:	0e 94 5a 05 	call	0xab4	; 0xab4 <I2C_0_send_ack>
     2a2:	08 95       	ret

000002a4 <I2C_0_slave_init>:
	//;
}

void I2C_0_slave_init(void){
	
	I2C_0_set_read_callback(I2C_0_read_handler);
     2a4:	8a e3       	ldi	r24, 0x3A	; 58
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	0e 94 6e 05 	call	0xadc	; 0xadc <I2C_0_set_read_callback>
	I2C_0_set_write_callback(I2C_0_write_handler);
     2ac:	83 e3       	ldi	r24, 0x33	; 51
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <I2C_0_set_write_callback>
	I2C_0_set_address_callback(I2C_0_address_handler);
     2b4:	8a e2       	ldi	r24, 0x2A	; 42
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	0e 94 88 05 	call	0xb10	; 0xb10 <I2C_0_set_address_callback>
	I2C_0_set_stop_callback(I2C_0_stop_handler);
     2bc:	86 e2       	ldi	r24, 0x26	; 38
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	0e 94 95 05 	call	0xb2a	; 0xb2a <I2C_0_set_stop_callback>
	I2C_0_set_collision_callback(I2C_0_error_handler);
     2c4:	89 e2       	ldi	r24, 0x29	; 41
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	0e 94 a2 05 	call	0xb44	; 0xb44 <I2C_0_set_collision_callback>
	I2C_0_set_bus_error_callback(I2C_0_error_handler);
     2cc:	89 e2       	ldi	r24, 0x29	; 41
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	0e 94 1b 06 	call	0xc36	; 0xc36 <I2C_0_set_bus_error_callback>
	I2C_0_open();
     2d4:	0e 94 4a 05 	call	0xa94	; 0xa94 <I2C_0_open>
     2d8:	08 95       	ret

000002da <setRow>:

//
// Set the specified col low for row scan                               
//
void setRow(uint8_t row){
	switch(row){
     2da:	82 30       	cpi	r24, 0x02	; 2
     2dc:	b9 f0       	breq	.+46     	; 0x30c <setRow+0x32>
     2de:	28 f4       	brcc	.+10     	; 0x2ea <setRow+0x10>
     2e0:	88 23       	and	r24, r24
     2e2:	41 f0       	breq	.+16     	; 0x2f4 <setRow+0x1a>
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	61 f0       	breq	.+24     	; 0x300 <setRow+0x26>
     2e8:	08 95       	ret
     2ea:	83 30       	cpi	r24, 0x03	; 3
     2ec:	a9 f0       	breq	.+42     	; 0x318 <setRow+0x3e>
     2ee:	84 30       	cpi	r24, 0x04	; 4
     2f0:	c9 f0       	breq	.+50     	; 0x324 <setRow+0x4a>
     2f2:	08 95       	ret
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     2f4:	0d 98       	cbi	0x01, 5	; 1
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     2f6:	0c 9a       	sbi	0x01, 4	; 1
     2f8:	0b 9a       	sbi	0x01, 3	; 1
     2fa:	0a 9a       	sbi	0x01, 2	; 1
     2fc:	09 9a       	sbi	0x01, 1	; 1
     2fe:	08 95       	ret
     300:	0d 9a       	sbi	0x01, 5	; 1
	} else {
		VPORTA.OUT &= ~(1 << pin);
     302:	0c 98       	cbi	0x01, 4	; 1
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     304:	0b 9a       	sbi	0x01, 3	; 1
     306:	0a 9a       	sbi	0x01, 2	; 1
     308:	09 9a       	sbi	0x01, 1	; 1
     30a:	08 95       	ret
     30c:	0d 9a       	sbi	0x01, 5	; 1
     30e:	0c 9a       	sbi	0x01, 4	; 1
	} else {
		VPORTA.OUT &= ~(1 << pin);
     310:	0b 98       	cbi	0x01, 3	; 1
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     312:	0a 9a       	sbi	0x01, 2	; 1
     314:	09 9a       	sbi	0x01, 1	; 1
     316:	08 95       	ret
     318:	0d 9a       	sbi	0x01, 5	; 1
     31a:	0c 9a       	sbi	0x01, 4	; 1
     31c:	0b 9a       	sbi	0x01, 3	; 1
	} else {
		VPORTA.OUT &= ~(1 << pin);
     31e:	0a 98       	cbi	0x01, 2	; 1
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     320:	09 9a       	sbi	0x01, 1	; 1
     322:	08 95       	ret
     324:	0d 9a       	sbi	0x01, 5	; 1
     326:	0c 9a       	sbi	0x01, 4	; 1
     328:	0b 9a       	sbi	0x01, 3	; 1
     32a:	0a 9a       	sbi	0x01, 2	; 1
	} else {
		VPORTA.OUT &= ~(1 << pin);
     32c:	09 98       	cbi	0x01, 1	; 1
     32e:	08 95       	ret

00000330 <readCol>:
//
// Read the specified col and return a boolean
// The value read is inverted
//
bool readCol(uint8_t col){
	switch(col){
     330:	82 30       	cpi	r24, 0x02	; 2
     332:	d1 f0       	breq	.+52     	; 0x368 <readCol+0x38>
     334:	28 f4       	brcc	.+10     	; 0x340 <readCol+0x10>
     336:	88 23       	and	r24, r24
     338:	49 f0       	breq	.+18     	; 0x34c <readCol+0x1c>
     33a:	81 30       	cpi	r24, 0x01	; 1
     33c:	71 f0       	breq	.+28     	; 0x35a <readCol+0x2a>
     33e:	2e c0       	rjmp	.+92     	; 0x39c <readCol+0x6c>
     340:	84 30       	cpi	r24, 0x04	; 4
     342:	f9 f0       	breq	.+62     	; 0x382 <readCol+0x52>
     344:	c0 f0       	brcs	.+48     	; 0x376 <readCol+0x46>
     346:	85 30       	cpi	r24, 0x05	; 5
     348:	11 f1       	breq	.+68     	; 0x38e <readCol+0x5e>
     34a:	28 c0       	rjmp	.+80     	; 0x39c <readCol+0x6c>
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     34c:	86 b1       	in	r24, 0x06	; 6
		case 0:
			return !C0_get_level();
     34e:	82 fb       	bst	r24, 2
     350:	99 27       	eor	r25, r25
     352:	90 f9       	bld	r25, 0
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	89 27       	eor	r24, r25
     358:	08 95       	ret
     35a:	86 b1       	in	r24, 0x06	; 6
		case 1:
			return !C1_get_level();
     35c:	86 fb       	bst	r24, 6
     35e:	99 27       	eor	r25, r25
     360:	90 f9       	bld	r25, 0
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	89 27       	eor	r24, r25
     366:	08 95       	ret
     368:	86 b1       	in	r24, 0x06	; 6
		case 2:
			return !C2_get_level();
     36a:	85 fb       	bst	r24, 5
     36c:	99 27       	eor	r25, r25
     36e:	90 f9       	bld	r25, 0
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	89 27       	eor	r24, r25
     374:	08 95       	ret
     376:	86 b1       	in	r24, 0x06	; 6
		case 3:
			return !C3_get_level();
     378:	80 95       	com	r24
     37a:	88 1f       	adc	r24, r24
     37c:	88 27       	eor	r24, r24
     37e:	88 1f       	adc	r24, r24
     380:	08 95       	ret
     382:	86 b1       	in	r24, 0x06	; 6
		case 4:
			return !C4_get_level();
     384:	82 95       	swap	r24
     386:	81 70       	andi	r24, 0x01	; 1
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	89 27       	eor	r24, r25
     38c:	08 95       	ret
     38e:	86 b1       	in	r24, 0x06	; 6
		case 5:
			return !C5_get_level();
     390:	83 fb       	bst	r24, 3
     392:	99 27       	eor	r25, r25
     394:	90 f9       	bld	r25, 0
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	89 27       	eor	r24, r25
     39a:	08 95       	ret
		default:
			return false;
     39c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     39e:	08 95       	ret

000003a0 <getKeyOffset>:


//
// Try to find the offset of the key based on the row and col, or return NO_KEY
//
uint8_t getKeyOffset(uint8_t row, uint8_t col){
     3a0:	e5 ee       	ldi	r30, 0xE5	; 229
     3a2:	fb e9       	ldi	r31, 0x9B	; 155
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
	
	for(uint8_t i = 0; i < (sizeof(keymap) / sizeof(keymap[0])); i++){
		// See if the row and col match
		if(keymap[i].col == col && keymap[i].row == row){
     3a8:	a9 01       	movw	r20, r18
     3aa:	91 81       	ldd	r25, Z+1	; 0x01
     3ac:	96 13       	cpse	r25, r22
     3ae:	0d c0       	rjmp	.+26     	; 0x3ca <getKeyOffset+0x2a>
     3b0:	90 81       	ld	r25, Z
     3b2:	98 13       	cpse	r25, r24
     3b4:	0a c0       	rjmp	.+20     	; 0x3ca <getKeyOffset+0x2a>
			// It's a match
			return keymap[i].key;
     3b6:	f9 01       	movw	r30, r18
     3b8:	ee 0f       	add	r30, r30
     3ba:	ff 1f       	adc	r31, r31
     3bc:	4e 0f       	add	r20, r30
     3be:	5f 1f       	adc	r21, r31
     3c0:	fa 01       	movw	r30, r20
     3c2:	ec 51       	subi	r30, 0x1C	; 28
     3c4:	f4 46       	sbci	r31, 0x64	; 100
     3c6:	80 81       	ld	r24, Z
     3c8:	08 95       	ret
     3ca:	2f 5f       	subi	r18, 0xFF	; 255
     3cc:	3f 4f       	sbci	r19, 0xFF	; 255
     3ce:	33 96       	adiw	r30, 0x03	; 3
//
// Try to find the offset of the key based on the row and col, or return NO_KEY
//
uint8_t getKeyOffset(uint8_t row, uint8_t col){
	
	for(uint8_t i = 0; i < (sizeof(keymap) / sizeof(keymap[0])); i++){
     3d0:	2a 31       	cpi	r18, 0x1A	; 26
     3d2:	31 05       	cpc	r19, r1
     3d4:	49 f7       	brne	.-46     	; 0x3a8 <getKeyOffset+0x8>
			// It's a match
			return keymap[i].key;
		}
	}
	
	return NO_KEY;
     3d6:	8f ef       	ldi	r24, 0xFF	; 255
	
}
     3d8:	08 95       	ret

000003da <getKeyState>:
// Get the keystate of a specified keyoffset
//
bool getKeyState(uint8_t *keyState, uint8_t keyOffset){
	
	
	if(keyOffset < 8){
     3da:	68 30       	cpi	r22, 0x08	; 8
     3dc:	50 f4       	brcc	.+20     	; 0x3f2 <getKeyState+0x18>
		return (keyState[0] >> keyOffset) & 0x01;
     3de:	fc 01       	movw	r30, r24
     3e0:	80 81       	ld	r24, Z
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <getKeyState+0x10>
     3e6:	95 95       	asr	r25
     3e8:	87 95       	ror	r24
     3ea:	6a 95       	dec	r22
     3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <getKeyState+0xc>
     3ee:	81 70       	andi	r24, 0x01	; 1
     3f0:	08 95       	ret
	}
	if(keyOffset < 16){
     3f2:	60 31       	cpi	r22, 0x10	; 16
     3f4:	58 f4       	brcc	.+22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		return (keyState[1] >> (keyOffset - 8)) & 0x01;
     3f6:	fc 01       	movw	r30, r24
     3f8:	81 81       	ldd	r24, Z+1	; 0x01
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	68 50       	subi	r22, 0x08	; 8
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     400:	95 95       	asr	r25
     402:	87 95       	ror	r24
     404:	6a 95       	dec	r22
     406:	e2 f7       	brpl	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
     408:	81 70       	andi	r24, 0x01	; 1
     40a:	08 95       	ret
	}
	if(keyOffset < 24){
     40c:	68 31       	cpi	r22, 0x18	; 24
     40e:	58 f4       	brcc	.+22     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		return (keyState[2] >> (keyOffset - 16)) & 0x01;
     410:	fc 01       	movw	r30, r24
     412:	82 81       	ldd	r24, Z+2	; 0x02
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	60 51       	subi	r22, 0x10	; 16
     418:	02 c0       	rjmp	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41a:	95 95       	asr	r25
     41c:	87 95       	ror	r24
     41e:	6a 95       	dec	r22
     420:	e2 f7       	brpl	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     422:	81 70       	andi	r24, 0x01	; 1
     424:	08 95       	ret
	}
	if(keyOffset < 32){
     426:	60 32       	cpi	r22, 0x20	; 32
     428:	58 f4       	brcc	.+22     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		return (keyState[3] >> (keyOffset - 24)) & 0x01;
     42a:	fc 01       	movw	r30, r24
     42c:	83 81       	ldd	r24, Z+3	; 0x03
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	68 51       	subi	r22, 0x18	; 24
     432:	02 c0       	rjmp	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     434:	95 95       	asr	r25
     436:	87 95       	ror	r24
     438:	6a 95       	dec	r22
     43a:	e2 f7       	brpl	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     43c:	81 70       	andi	r24, 0x01	; 1
     43e:	08 95       	ret
	}
	
	return false;
     440:	80 e0       	ldi	r24, 0x00	; 0
	
}
     442:	08 95       	ret

00000444 <setKeyState>:

//
// Set the keystate of a specified keyoffset
//
void setKeyState(uint8_t *keyState, uint8_t keyOffset, bool value){
     444:	0f 93       	push	r16
     446:	1f 93       	push	r17
	
		if(keyOffset < 8){			
     448:	68 30       	cpi	r22, 0x08	; 8
     44a:	c8 f4       	brcc	.+50     	; 0x47e <setKeyState+0x3a>
			keyState[0] = (keyState[0] & ~(1UL << keyOffset)) | (value << keyOffset);
     44c:	01 e0       	ldi	r16, 0x01	; 1
     44e:	10 e0       	ldi	r17, 0x00	; 0
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	06 2e       	mov	r0, r22
     456:	04 c0       	rjmp	.+8      	; 0x460 <setKeyState+0x1c>
     458:	00 0f       	add	r16, r16
     45a:	11 1f       	adc	r17, r17
     45c:	22 1f       	adc	r18, r18
     45e:	33 1f       	adc	r19, r19
     460:	0a 94       	dec	r0
     462:	d2 f7       	brpl	.-12     	; 0x458 <setKeyState+0x14>
     464:	00 95       	com	r16
     466:	fc 01       	movw	r30, r24
     468:	20 81       	ld	r18, Z
     46a:	02 23       	and	r16, r18
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	02 c0       	rjmp	.+4      	; 0x474 <setKeyState+0x30>
     470:	44 0f       	add	r20, r20
     472:	55 1f       	adc	r21, r21
     474:	6a 95       	dec	r22
     476:	e2 f7       	brpl	.-8      	; 0x470 <setKeyState+0x2c>
     478:	40 2b       	or	r20, r16
     47a:	40 83       	st	Z, r20
			return;
     47c:	59 c0       	rjmp	.+178    	; 0x530 <setKeyState+0xec>
		}
		if(keyOffset < 16){
     47e:	60 31       	cpi	r22, 0x10	; 16
     480:	e0 f4       	brcc	.+56     	; 0x4ba <setKeyState+0x76>
			keyState[1] = (keyState[1] & ~(1UL << (keyOffset - 8))) | (value << (keyOffset - 8));
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	68 50       	subi	r22, 0x08	; 8
     486:	71 09       	sbc	r23, r1
     488:	01 e0       	ldi	r16, 0x01	; 1
     48a:	10 e0       	ldi	r17, 0x00	; 0
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	06 2e       	mov	r0, r22
     492:	04 c0       	rjmp	.+8      	; 0x49c <setKeyState+0x58>
     494:	00 0f       	add	r16, r16
     496:	11 1f       	adc	r17, r17
     498:	22 1f       	adc	r18, r18
     49a:	33 1f       	adc	r19, r19
     49c:	0a 94       	dec	r0
     49e:	d2 f7       	brpl	.-12     	; 0x494 <setKeyState+0x50>
     4a0:	00 95       	com	r16
     4a2:	fc 01       	movw	r30, r24
     4a4:	21 81       	ldd	r18, Z+1	; 0x01
     4a6:	02 23       	and	r16, r18
     4a8:	50 e0       	ldi	r21, 0x00	; 0
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <setKeyState+0x6c>
     4ac:	44 0f       	add	r20, r20
     4ae:	55 1f       	adc	r21, r21
     4b0:	6a 95       	dec	r22
     4b2:	e2 f7       	brpl	.-8      	; 0x4ac <setKeyState+0x68>
     4b4:	40 2b       	or	r20, r16
     4b6:	41 83       	std	Z+1, r20	; 0x01
			return;
     4b8:	3b c0       	rjmp	.+118    	; 0x530 <setKeyState+0xec>
		}
		if(keyOffset < 24){
     4ba:	68 31       	cpi	r22, 0x18	; 24
     4bc:	e0 f4       	brcc	.+56     	; 0x4f6 <setKeyState+0xb2>
			keyState[2] = (keyState[2] & ~(1UL << (keyOffset - 16))) | (value << (keyOffset - 16));
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	60 51       	subi	r22, 0x10	; 16
     4c2:	71 09       	sbc	r23, r1
     4c4:	01 e0       	ldi	r16, 0x01	; 1
     4c6:	10 e0       	ldi	r17, 0x00	; 0
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	06 2e       	mov	r0, r22
     4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <setKeyState+0x94>
     4d0:	00 0f       	add	r16, r16
     4d2:	11 1f       	adc	r17, r17
     4d4:	22 1f       	adc	r18, r18
     4d6:	33 1f       	adc	r19, r19
     4d8:	0a 94       	dec	r0
     4da:	d2 f7       	brpl	.-12     	; 0x4d0 <setKeyState+0x8c>
     4dc:	00 95       	com	r16
     4de:	fc 01       	movw	r30, r24
     4e0:	22 81       	ldd	r18, Z+2	; 0x02
     4e2:	02 23       	and	r16, r18
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <setKeyState+0xa8>
     4e8:	44 0f       	add	r20, r20
     4ea:	55 1f       	adc	r21, r21
     4ec:	6a 95       	dec	r22
     4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <setKeyState+0xa4>
     4f0:	40 2b       	or	r20, r16
     4f2:	42 83       	std	Z+2, r20	; 0x02
			return;
     4f4:	1d c0       	rjmp	.+58     	; 0x530 <setKeyState+0xec>
		}
		if(keyOffset < 32){
     4f6:	60 32       	cpi	r22, 0x20	; 32
     4f8:	d8 f4       	brcc	.+54     	; 0x530 <setKeyState+0xec>
			keyState[3] = (keyState[3] & ~(1UL << (keyOffset - 24))) | (value << (keyOffset - 24));
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	68 51       	subi	r22, 0x18	; 24
     4fe:	71 09       	sbc	r23, r1
     500:	01 e0       	ldi	r16, 0x01	; 1
     502:	10 e0       	ldi	r17, 0x00	; 0
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	06 2e       	mov	r0, r22
     50a:	04 c0       	rjmp	.+8      	; 0x514 <setKeyState+0xd0>
     50c:	00 0f       	add	r16, r16
     50e:	11 1f       	adc	r17, r17
     510:	22 1f       	adc	r18, r18
     512:	33 1f       	adc	r19, r19
     514:	0a 94       	dec	r0
     516:	d2 f7       	brpl	.-12     	; 0x50c <setKeyState+0xc8>
     518:	00 95       	com	r16
     51a:	fc 01       	movw	r30, r24
     51c:	23 81       	ldd	r18, Z+3	; 0x03
     51e:	02 23       	and	r16, r18
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	02 c0       	rjmp	.+4      	; 0x528 <setKeyState+0xe4>
     524:	44 0f       	add	r20, r20
     526:	55 1f       	adc	r21, r21
     528:	6a 95       	dec	r22
     52a:	e2 f7       	brpl	.-8      	; 0x524 <setKeyState+0xe0>
     52c:	40 2b       	or	r20, r16
     52e:	43 83       	std	Z+3, r20	; 0x03
		}
	
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	08 95       	ret

00000536 <main>:
int main(void){
	
	bool keyChange = false;
	
	// Init the system
	system_init();
     536:	0e 94 87 04 	call	0x90e	; 0x90e <system_init>
	touch_init();
     53a:	0e 94 13 03 	call	0x626	; 0x626 <touch_init>
	I2C_0_slave_init();
     53e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <I2C_0_slave_init>
	
	ADC_0_enable();
     542:	0e 94 bc 03 	call	0x778	; 0x778 <ADC_0_enable>
	
	cpu_irq_enable();
     546:	78 94       	sei
		// Since we know which row we are looking at, this tells us the row,col val for any key
		// that may be down
		//
		// No debouncing right now, but shouldn't be a problem since the CPU has to poll us
		// via I2C to get the key.
		for(uint8_t row = 0; row <= 4; row++){
     548:	10 e0       	ldi	r17, 0x00	; 0
	cpu_irq_enable();
	
	while(1){

		// Drop the button change flag		
		keyChange = false;
     54a:	f1 2c       	mov	r15, r1
		//
		// No debouncing right now, but shouldn't be a problem since the CPU has to poll us
		// via I2C to get the key.
		for(uint8_t row = 0; row <= 4; row++){
			
			setRow(row);
     54c:	81 2f       	mov	r24, r17
     54e:	0e 94 6d 01 	call	0x2da	; 0x2da <setRow>
     552:	c0 e0       	ldi	r28, 0x00	; 0
			for(int col = 0; col <= 5; col++){
				
				// Determine if there is actually a key here
				// We have 26 keys, but the grid is 5x6, so there are 4 locations with no
				// actual key
				uint8_t keyOffset = getKeyOffset(row, col);
     554:	6c 2f       	mov	r22, r28
     556:	81 2f       	mov	r24, r17
     558:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <getKeyOffset>
     55c:	d8 2f       	mov	r29, r24
				if(keyOffset != NO_KEY){
     55e:	8f 3f       	cpi	r24, 0xFF	; 255
     560:	99 f0       	breq	.+38     	; 0x588 <main+0x52>
					
					// Read the value of the key at this location
					bool keyVal = readCol(col);
     562:	8c 2f       	mov	r24, r28
     564:	0e 94 98 01 	call	0x330	; 0x330 <readCol>
     568:	08 2f       	mov	r16, r24
					
					// If the state is not the same as the old state, save it and raise the key changed flag
					if(keyVal != getKeyState(keyState, keyOffset)){
     56a:	6d 2f       	mov	r22, r29
     56c:	8b e2       	ldi	r24, 0x2B	; 43
     56e:	98 e3       	ldi	r25, 0x38	; 56
     570:	0e 94 ed 01 	call	0x3da	; 0x3da <getKeyState>
     574:	08 17       	cp	r16, r24
     576:	41 f0       	breq	.+16     	; 0x588 <main+0x52>
						keyChange = true;
						setKeyState(keyState, keyOffset, keyVal);
     578:	40 2f       	mov	r20, r16
     57a:	6d 2f       	mov	r22, r29
     57c:	8b e2       	ldi	r24, 0x2B	; 43
     57e:	98 e3       	ldi	r25, 0x38	; 56
     580:	0e 94 22 02 	call	0x444	; 0x444 <setKeyState>
					// Read the value of the key at this location
					bool keyVal = readCol(col);
					
					// If the state is not the same as the old state, save it and raise the key changed flag
					if(keyVal != getKeyState(keyState, keyOffset)){
						keyChange = true;
     584:	ff 24       	eor	r15, r15
     586:	f3 94       	inc	r15
     588:	cf 5f       	subi	r28, 0xFF	; 255
		for(uint8_t row = 0; row <= 4; row++){
			
			setRow(row);
			
			// OK, scan the cols
			for(int col = 0; col <= 5; col++){
     58a:	c6 30       	cpi	r28, 0x06	; 6
     58c:	19 f7       	brne	.-58     	; 0x554 <main+0x1e>
		// Since we know which row we are looking at, this tells us the row,col val for any key
		// that may be down
		//
		// No debouncing right now, but shouldn't be a problem since the CPU has to poll us
		// via I2C to get the key.
		for(uint8_t row = 0; row <= 4; row++){
     58e:	1f 5f       	subi	r17, 0xFF	; 255
     590:	15 30       	cpi	r17, 0x05	; 5
     592:	e1 f6       	brne	.-72     	; 0x54c <main+0x16>
				}
			}
		}
		
		// Now the cap touch button
		touch_process();
     594:	0e 94 3b 03 	call	0x676	; 0x676 <touch_process>
		if(measurement_done_touch == 1){
     598:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <measurement_done_touch>
     59c:	81 30       	cpi	r24, 0x01	; 1
     59e:	01 f5       	brne	.+64     	; 0x5e0 <main+0xaa>
			measurement_done_touch = 0;
     5a0:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <measurement_done_touch>
			
			// Grab the old value
			bool oldVal = getKeyState(keyState, HAX);
     5a4:	6a e1       	ldi	r22, 0x1A	; 26
     5a6:	8b e2       	ldi	r24, 0x2B	; 43
     5a8:	98 e3       	ldi	r25, 0x38	; 56
     5aa:	0e 94 ed 01 	call	0x3da	; 0x3da <getKeyState>
     5ae:	c8 2f       	mov	r28, r24
			bool newVal;
			
			// Determine the current value.  We only have one cap sense button, which is id 0
			if((get_sensor_state(0) & KEY_TOUCHED_MASK) != 0){
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 81 03 	call	0x702	; 0x702 <get_sensor_state>
     5b8:	48 2f       	mov	r20, r24
     5ba:	44 1f       	adc	r20, r20
     5bc:	44 27       	eor	r20, r20
     5be:	44 1f       	adc	r20, r20
			else{
				// No touch
				newVal = false;
			}
			
			if(oldVal != newVal){
     5c0:	c4 17       	cp	r28, r20
     5c2:	71 f0       	breq	.+28     	; 0x5e0 <main+0xaa>
				// Cap touch has changed
				setKeyState(keyState, HAX, newVal);
     5c4:	6a e1       	ldi	r22, 0x1A	; 26
     5c6:	8b e2       	ldi	r24, 0x2B	; 43
     5c8:	98 e3       	ldi	r25, 0x38	; 56
     5ca:	0e 94 22 02 	call	0x444	; 0x444 <setKeyState>
			
		}
		
		// Get the touch screen values
		// 4 is X, 5 is Y - but the screen is rotated 90 degrees so we swap the two
		keyState[4] = ts_getY();
     5ce:	0e 94 5d 00 	call	0xba	; 0xba <ts_getY>
     5d2:	cb e2       	ldi	r28, 0x2B	; 43
     5d4:	d8 e3       	ldi	r29, 0x38	; 56
     5d6:	8c 83       	std	Y+4, r24	; 0x04
		keyState[5] = ts_getX();
     5d8:	0e 94 ae 00 	call	0x15c	; 0x15c <ts_getX>
     5dc:	8d 83       	std	Y+5, r24	; 0x05
     5de:	0a c0       	rjmp	.+20     	; 0x5f4 <main+0xbe>
			
		}
		
		// Get the touch screen values
		// 4 is X, 5 is Y - but the screen is rotated 90 degrees so we swap the two
		keyState[4] = ts_getY();
     5e0:	0e 94 5d 00 	call	0xba	; 0xba <ts_getY>
     5e4:	cb e2       	ldi	r28, 0x2B	; 43
     5e6:	d8 e3       	ldi	r29, 0x38	; 56
     5e8:	8c 83       	std	Y+4, r24	; 0x04
		keyState[5] = ts_getX();
     5ea:	0e 94 ae 00 	call	0x15c	; 0x15c <ts_getX>
     5ee:	8d 83       	std	Y+5, r24	; 0x05
	
		// If a key has changed, pull the key change pin high to signal the BMD to scan us for the key state 
		if(keyChange){
     5f0:	ff 20       	and	r15, r15
     5f2:	11 f0       	breq	.+4      	; 0x5f8 <main+0xc2>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     5f4:	4d 9a       	sbi	0x09, 5	; 9
     5f6:	01 c0       	rjmp	.+2      	; 0x5fa <main+0xc4>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     5f8:	4d 98       	cbi	0x09, 5	; 9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5fa:	8f e4       	ldi	r24, 0x4F	; 79
     5fc:	93 ec       	ldi	r25, 0xC3	; 195
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	f1 f7       	brne	.-4      	; 0x5fe <main+0xc8>
     602:	00 c0       	rjmp	.+0      	; 0x604 <main+0xce>
     604:	00 00       	nop
     606:	a0 cf       	rjmp	.-192    	; 0x548 <main+0x12>

00000608 <qtm_measure_complete_callback>:
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
}
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <touch_postprocess_request>
     60e:	08 95       	ret

00000610 <Timer_set_period>:
     610:	e0 e4       	ldi	r30, 0x40	; 64
     612:	f1 e0       	ldi	r31, 0x01	; 1
     614:	91 81       	ldd	r25, Z+1	; 0x01
     616:	92 fd       	sbrc	r25, 2
     618:	fd cf       	rjmp	.-6      	; 0x614 <Timer_set_period+0x4>
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <gain_setting_int_cap+0x7f6518>
     620:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <gain_setting_int_cap+0x7f6519>
     624:	08 95       	ret

00000626 <touch_init>:
     626:	80 e2       	ldi	r24, 0x20	; 32
     628:	0e 94 08 03 	call	0x610	; 0x610 <Timer_set_period>
     62c:	e7 e1       	ldi	r30, 0x17	; 23
     62e:	f4 e0       	ldi	r31, 0x04	; 4
     630:	80 81       	ld	r24, Z
     632:	87 7f       	andi	r24, 0xF7	; 247
     634:	80 83       	st	Z, r24
     636:	80 81       	ld	r24, Z
     638:	88 7f       	andi	r24, 0xF8	; 248
     63a:	84 60       	ori	r24, 0x04	; 4
     63c:	80 83       	st	Z, r24
     63e:	85 e1       	ldi	r24, 0x15	; 21
     640:	98 e3       	ldi	r25, 0x38	; 56
     642:	0e 94 ac 0c 	call	0x1958	; 0x1958 <qtm_ptc_init_acquisition_module>
     646:	8c e4       	ldi	r24, 0x4C	; 76
     648:	98 e3       	ldi	r25, 0x38	; 56
     64a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <qtm_ptc_qtlib_assign_signal_memory>
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	85 e1       	ldi	r24, 0x15	; 21
     654:	98 e3       	ldi	r25, 0x38	; 56
     656:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <qtm_enable_sensor_node>
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	85 e1       	ldi	r24, 0x15	; 21
     660:	98 e3       	ldi	r25, 0x38	; 56
     662:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <qtm_calibrate_sensor_node>
     666:	47 e4       	ldi	r20, 0x47	; 71
     668:	58 e3       	ldi	r21, 0x38	; 56
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	98 e3       	ldi	r25, 0x38	; 56
     670:	0e 94 a9 06 	call	0xd52	; 0xd52 <qtm_init_sensor_key>
     674:	08 95       	ret

00000676 <touch_process>:
     676:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <time_to_measure_touch_flag>
     67a:	81 30       	cpi	r24, 0x01	; 1
     67c:	51 f4       	brne	.+20     	; 0x692 <touch_process+0x1c>
     67e:	64 e0       	ldi	r22, 0x04	; 4
     680:	73 e0       	ldi	r23, 0x03	; 3
     682:	85 e1       	ldi	r24, 0x15	; 21
     684:	98 e3       	ldi	r25, 0x38	; 56
     686:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <qtm_ptc_start_measurement_seq>
     68a:	81 11       	cpse	r24, r1
     68c:	02 c0       	rjmp	.+4      	; 0x692 <touch_process+0x1c>
     68e:	10 92 34 38 	sts	0x3834, r1	; 0x803834 <time_to_measure_touch_flag>
     692:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <touch_postprocess_request>
     696:	81 30       	cpi	r24, 0x01	; 1
     698:	09 f5       	brne	.+66     	; 0x6dc <touch_process+0x66>
     69a:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <touch_postprocess_request>
     69e:	0e 94 2e 0b 	call	0x165c	; 0x165c <qtm_acquisition_process>
     6a2:	81 11       	cpse	r24, r1
     6a4:	0a c0       	rjmp	.+20     	; 0x6ba <touch_process+0x44>
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	98 e3       	ldi	r25, 0x38	; 56
     6aa:	0e 94 c8 06 	call	0xd90	; 0xd90 <qtm_key_sensors_process>
     6ae:	88 23       	and	r24, r24
     6b0:	39 f0       	breq	.+14     	; 0x6c0 <touch_process+0x4a>
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <module_error_code>
     6b8:	03 c0       	rjmp	.+6      	; 0x6c0 <touch_process+0x4a>
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <module_error_code>
     6c0:	e0 91 00 38 	lds	r30, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     6c4:	f0 91 01 38 	lds	r31, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
     6c8:	80 81       	ld	r24, Z
     6ca:	88 23       	and	r24, r24
     6cc:	24 f4       	brge	.+8      	; 0x6d6 <touch_process+0x60>
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <time_to_measure_touch_flag>
     6d4:	08 95       	ret
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <measurement_done_touch>
     6dc:	08 95       	ret

000006de <touch_timer_handler>:
     6de:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <interrupt_cnt>
     6e2:	8f 5f       	subi	r24, 0xFF	; 255
     6e4:	84 31       	cpi	r24, 0x14	; 20
     6e6:	18 f4       	brcc	.+6      	; 0x6ee <touch_timer_handler+0x10>
     6e8:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <interrupt_cnt>
     6ec:	08 95       	ret
     6ee:	10 92 46 38 	sts	0x3846, r1	; 0x803846 <interrupt_cnt>
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <time_to_measure_touch_flag>
     6f8:	84 e1       	ldi	r24, 0x14	; 20
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 9e 06 	call	0xd3c	; 0xd3c <qtm_update_qtlib_timer>
     700:	08 95       	ret

00000702 <get_sensor_state>:
     702:	9c 01       	movw	r18, r24
     704:	22 0f       	add	r18, r18
     706:	33 1f       	adc	r19, r19
     708:	82 0f       	add	r24, r18
     70a:	93 1f       	adc	r25, r19
     70c:	88 0f       	add	r24, r24
     70e:	99 1f       	adc	r25, r25
     710:	e0 91 04 38 	lds	r30, 0x3804	; 0x803804 <__DATA_REGION_ORIGIN__+0x4>
     714:	f0 91 05 38 	lds	r31, 0x3805	; 0x803805 <__DATA_REGION_ORIGIN__+0x5>
     718:	e8 0f       	add	r30, r24
     71a:	f9 1f       	adc	r31, r25
     71c:	80 81       	ld	r24, Z
     71e:	08 95       	ret

00000720 <__vector_20>:
Input    :  none
Output  :  none
Notes    :  none
============================================================================*/
ISR(ADC0_RESRDY_vect)
{
     720:	1f 92       	push	r1
     722:	0f 92       	push	r0
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	0f 92       	push	r0
     728:	11 24       	eor	r1, r1
     72a:	2f 93       	push	r18
     72c:	3f 93       	push	r19
     72e:	4f 93       	push	r20
     730:	5f 93       	push	r21
     732:	6f 93       	push	r22
     734:	7f 93       	push	r23
     736:	8f 93       	push	r24
     738:	9f 93       	push	r25
     73a:	af 93       	push	r26
     73c:	bf 93       	push	r27
     73e:	ef 93       	push	r30
     740:	ff 93       	push	r31
	qtm_t161x_ptc_handler_eoc();
     742:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <qtm_t161x_ptc_handler_eoc>
}
     746:	ff 91       	pop	r31
     748:	ef 91       	pop	r30
     74a:	bf 91       	pop	r27
     74c:	af 91       	pop	r26
     74e:	9f 91       	pop	r25
     750:	8f 91       	pop	r24
     752:	7f 91       	pop	r23
     754:	6f 91       	pop	r22
     756:	5f 91       	pop	r21
     758:	4f 91       	pop	r20
     75a:	3f 91       	pop	r19
     75c:	2f 91       	pop	r18
     75e:	0f 90       	pop	r0
     760:	0f be       	out	0x3f, r0	; 63
     762:	0f 90       	pop	r0
     764:	1f 90       	pop	r1
     766:	18 95       	reti

00000768 <ADC_0_init>:
 *
 * \return Nothing.
 */
void ADC_0_register_callback(adc_irq_cb_t f)
{
	ADC_0_cb = f;
     768:	e0 e4       	ldi	r30, 0x40	; 64
     76a:	f6 e0       	ldi	r31, 0x06	; 6
     76c:	82 e1       	ldi	r24, 0x12	; 18
     76e:	82 83       	std	Z+2, r24	; 0x02
     770:	85 e0       	ldi	r24, 0x05	; 5
     772:	80 83       	st	Z, r24
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	08 95       	ret

00000778 <ADC_0_enable>:
     778:	e0 e4       	ldi	r30, 0x40	; 64
     77a:	f6 e0       	ldi	r31, 0x06	; 6
     77c:	80 81       	ld	r24, Z
     77e:	81 60       	ori	r24, 0x01	; 1
     780:	80 83       	st	Z, r24
     782:	08 95       	ret

00000784 <ADC_0_is_conversion_done>:
     784:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <gain_setting_int_cap+0x7f6a19>
     788:	81 70       	andi	r24, 0x01	; 1
     78a:	08 95       	ret

0000078c <ADC_0_get_conversion>:
     78c:	e0 e4       	ldi	r30, 0x40	; 64
     78e:	f6 e0       	ldi	r31, 0x06	; 6
     790:	86 83       	std	Z+6, r24	; 0x06
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	80 87       	std	Z+8, r24	; 0x08
     796:	0e 94 c2 03 	call	0x784	; 0x784 <ADC_0_is_conversion_done>
     79a:	88 23       	and	r24, r24
     79c:	e1 f3       	breq	.-8      	; 0x796 <ADC_0_get_conversion+0xa>
     79e:	e0 e4       	ldi	r30, 0x40	; 64
     7a0:	f6 e0       	ldi	r31, 0x06	; 6
     7a2:	20 89       	ldd	r18, Z+16	; 0x10
     7a4:	31 89       	ldd	r19, Z+17	; 0x11
     7a6:	93 85       	ldd	r25, Z+11	; 0x0b
     7a8:	91 60       	ori	r25, 0x01	; 1
     7aa:	93 87       	std	Z+11, r25	; 0x0b
     7ac:	c9 01       	movw	r24, r18
     7ae:	08 95       	ret

000007b0 <ADC_0_get_resolution>:
     7b0:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <gain_setting_int_cap+0x7f6a0e>
     7b4:	82 fd       	sbrc	r24, 2
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <ADC_0_get_resolution+0xc>
     7b8:	8a e0       	ldi	r24, 0x0A	; 10
     7ba:	08 95       	ret
     7bc:	88 e0       	ldi	r24, 0x08	; 8
     7be:	08 95       	ret

000007c0 <__vector_22>:
}

ISR(ADC1_RESRDY_vect)
{
     7c0:	1f 92       	push	r1
     7c2:	0f 92       	push	r0
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	0f 92       	push	r0
     7c8:	11 24       	eor	r1, r1
     7ca:	2f 93       	push	r18
     7cc:	3f 93       	push	r19
     7ce:	4f 93       	push	r20
     7d0:	5f 93       	push	r21
     7d2:	6f 93       	push	r22
     7d4:	7f 93       	push	r23
     7d6:	8f 93       	push	r24
     7d8:	9f 93       	push	r25
     7da:	af 93       	push	r26
     7dc:	bf 93       	push	r27
     7de:	ef 93       	push	r30
     7e0:	ff 93       	push	r31
	// Clear the interrupt flag
	ADC1.INTFLAGS |= ADC_RESRDY_bm;
     7e2:	e0 e4       	ldi	r30, 0x40	; 64
     7e4:	f6 e0       	ldi	r31, 0x06	; 6
     7e6:	83 85       	ldd	r24, Z+11	; 0x0b
     7e8:	81 60       	ori	r24, 0x01	; 1
     7ea:	83 87       	std	Z+11, r24	; 0x0b

	if (ADC_0_cb != NULL) {
     7ec:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <ADC_0_cb>
     7f0:	f0 91 36 38 	lds	r31, 0x3836	; 0x803836 <ADC_0_cb+0x1>
     7f4:	30 97       	sbiw	r30, 0x00	; 0
     7f6:	09 f0       	breq	.+2      	; 0x7fa <__vector_22+0x3a>
		ADC_0_cb();
     7f8:	09 95       	icall
	}
     7fa:	ff 91       	pop	r31
     7fc:	ef 91       	pop	r30
     7fe:	bf 91       	pop	r27
     800:	af 91       	pop	r26
     802:	9f 91       	pop	r25
     804:	8f 91       	pop	r24
     806:	7f 91       	pop	r23
     808:	6f 91       	pop	r22
     80a:	5f 91       	pop	r21
     80c:	4f 91       	pop	r20
     80e:	3f 91       	pop	r19
     810:	2f 91       	pop	r18
     812:	0f 90       	pop	r0
     814:	0f be       	out	0x3f, r0	; 63
     816:	0f 90       	pop	r0
     818:	1f 90       	pop	r1
     81a:	18 95       	reti

0000081c <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	08 95       	ret

00000820 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	68 ed       	ldi	r22, 0xD8	; 216
     824:	81 e6       	ldi	r24, 0x61	; 97
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 20 06 	call	0xc40	; 0xc40 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	08 95       	ret

00000830 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     830:	78 94       	sei

	return 0;
}
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	08 95       	ret

00000836 <mcu_init>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
     836:	e0 e1       	ldi	r30, 0x10	; 16
     838:	f4 e0       	ldi	r31, 0x04	; 4
     83a:	80 81       	ld	r24, Z
     83c:	88 60       	ori	r24, 0x08	; 8
     83e:	81 93       	st	Z+, r24
     840:	e8 31       	cpi	r30, 0x18	; 24
     842:	84 e0       	ldi	r24, 0x04	; 4
     844:	f8 07       	cpc	r31, r24
     846:	c9 f7       	brne	.-14     	; 0x83a <mcu_init+0x4>
     848:	e0 e3       	ldi	r30, 0x30	; 48
     84a:	f4 e0       	ldi	r31, 0x04	; 4
     84c:	80 81       	ld	r24, Z
     84e:	88 60       	ori	r24, 0x08	; 8
     850:	81 93       	st	Z+, r24
     852:	e8 33       	cpi	r30, 0x38	; 56
     854:	84 e0       	ldi	r24, 0x04	; 4
     856:	f8 07       	cpc	r31, r24
     858:	c9 f7       	brne	.-14     	; 0x84c <mcu_init+0x16>
     85a:	e0 e5       	ldi	r30, 0x50	; 80
     85c:	f4 e0       	ldi	r31, 0x04	; 4
     85e:	80 81       	ld	r24, Z
     860:	88 60       	ori	r24, 0x08	; 8
     862:	81 93       	st	Z+, r24
     864:	e8 35       	cpi	r30, 0x58	; 88
     866:	84 e0       	ldi	r24, 0x04	; 4
     868:	f8 07       	cpc	r31, r24
     86a:	c9 f7       	brne	.-14     	; 0x85e <mcu_init+0x28>
     86c:	08 95       	ret

0000086e <ADC_0_initialization>:
     86e:	e0 e5       	ldi	r30, 0x50	; 80
     870:	f4 e0       	ldi	r31, 0x04	; 4
     872:	80 81       	ld	r24, Z
     874:	88 7f       	andi	r24, 0xF8	; 248
     876:	84 60       	ori	r24, 0x04	; 4
     878:	80 83       	st	Z, r24
     87a:	80 81       	ld	r24, Z
     87c:	87 7f       	andi	r24, 0xF7	; 247
     87e:	80 83       	st	Z, r24
     880:	e1 e5       	ldi	r30, 0x51	; 81
     882:	f4 e0       	ldi	r31, 0x04	; 4
     884:	80 81       	ld	r24, Z
     886:	88 7f       	andi	r24, 0xF8	; 248
     888:	84 60       	ori	r24, 0x04	; 4
     88a:	80 83       	st	Z, r24
     88c:	80 81       	ld	r24, Z
     88e:	87 7f       	andi	r24, 0xF7	; 247
     890:	80 83       	st	Z, r24
     892:	4a 98       	cbi	0x09, 2	; 9
     894:	e2 e5       	ldi	r30, 0x52	; 82
     896:	f4 e0       	ldi	r31, 0x04	; 4
     898:	80 81       	ld	r24, Z
     89a:	88 60       	ori	r24, 0x08	; 8
     89c:	80 83       	st	Z, r24
     89e:	80 81       	ld	r24, Z
     8a0:	87 7f       	andi	r24, 0xF7	; 247
     8a2:	80 83       	st	Z, r24
     8a4:	80 81       	ld	r24, Z
     8a6:	8f 77       	andi	r24, 0x7F	; 127
     8a8:	80 83       	st	Z, r24
     8aa:	80 81       	ld	r24, Z
     8ac:	88 7f       	andi	r24, 0xF8	; 248
     8ae:	80 83       	st	Z, r24
     8b0:	4b 98       	cbi	0x09, 3	; 9
     8b2:	e3 e5       	ldi	r30, 0x53	; 83
     8b4:	f4 e0       	ldi	r31, 0x04	; 4
     8b6:	80 81       	ld	r24, Z
     8b8:	88 60       	ori	r24, 0x08	; 8
     8ba:	80 83       	st	Z, r24
     8bc:	80 81       	ld	r24, Z
     8be:	87 7f       	andi	r24, 0xF7	; 247
     8c0:	80 83       	st	Z, r24
     8c2:	80 81       	ld	r24, Z
     8c4:	8f 77       	andi	r24, 0x7F	; 127
     8c6:	80 83       	st	Z, r24
     8c8:	80 81       	ld	r24, Z
     8ca:	88 7f       	andi	r24, 0xF8	; 248
     8cc:	80 83       	st	Z, r24
     8ce:	0e 94 b4 03 	call	0x768	; 0x768 <ADC_0_init>
     8d2:	08 95       	ret

000008d4 <I2C_0_initialization>:
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     8d4:	28 98       	cbi	0x05, 0	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     8d6:	20 9a       	sbi	0x04, 0	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     8d8:	e0 e3       	ldi	r30, 0x30	; 48
     8da:	f4 e0       	ldi	r31, 0x04	; 4
     8dc:	80 81       	ld	r24, Z
     8de:	87 7f       	andi	r24, 0xF7	; 247
     8e0:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     8e2:	80 81       	ld	r24, Z
     8e4:	8f 77       	andi	r24, 0x7F	; 127
     8e6:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     8e8:	80 81       	ld	r24, Z
     8ea:	88 7f       	andi	r24, 0xF8	; 248
     8ec:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     8ee:	29 98       	cbi	0x05, 1	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     8f0:	21 9a       	sbi	0x04, 1	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     8f2:	e1 e3       	ldi	r30, 0x31	; 49
     8f4:	f4 e0       	ldi	r31, 0x04	; 4
     8f6:	80 81       	ld	r24, Z
     8f8:	87 7f       	andi	r24, 0xF7	; 247
     8fa:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     8fc:	80 81       	ld	r24, Z
     8fe:	8f 77       	andi	r24, 0x7F	; 127
     900:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     902:	80 81       	ld	r24, Z
     904:	88 7f       	andi	r24, 0xF8	; 248
     906:	80 83       	st	Z, r24
	PB1_set_dir(PORT_DIR_OUT);
	PB1_set_pull_mode(PORT_PULL_OFF);
	PB1_set_inverted(false);
	PB1_set_isc(PORT_ISC_INTDISABLE_gc);

	I2C_0_init();
     908:	0e 94 2b 05 	call	0xa56	; 0xa56 <I2C_0_init>
     90c:	08 95       	ret

0000090e <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     90e:	0e 94 1b 04 	call	0x836	; 0x836 <mcu_init>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     912:	0d 9a       	sbi	0x01, 5	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     914:	05 9a       	sbi	0x00, 5	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     916:	e5 e1       	ldi	r30, 0x15	; 21
     918:	f4 e0       	ldi	r31, 0x04	; 4
     91a:	80 81       	ld	r24, Z
     91c:	87 7f       	andi	r24, 0xF7	; 247
     91e:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     920:	80 81       	ld	r24, Z
     922:	8f 77       	andi	r24, 0x7F	; 127
     924:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     926:	80 81       	ld	r24, Z
     928:	88 7f       	andi	r24, 0xF8	; 248
     92a:	80 83       	st	Z, r24
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     92c:	0c 9a       	sbi	0x01, 4	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     92e:	04 9a       	sbi	0x00, 4	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     930:	e4 e1       	ldi	r30, 0x14	; 20
     932:	f4 e0       	ldi	r31, 0x04	; 4
     934:	80 81       	ld	r24, Z
     936:	87 7f       	andi	r24, 0xF7	; 247
     938:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     93a:	80 81       	ld	r24, Z
     93c:	8f 77       	andi	r24, 0x7F	; 127
     93e:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     940:	80 81       	ld	r24, Z
     942:	88 7f       	andi	r24, 0xF8	; 248
     944:	80 83       	st	Z, r24
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     946:	0b 9a       	sbi	0x01, 3	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     948:	03 9a       	sbi	0x00, 3	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     94a:	e3 e1       	ldi	r30, 0x13	; 19
     94c:	f4 e0       	ldi	r31, 0x04	; 4
     94e:	80 81       	ld	r24, Z
     950:	87 7f       	andi	r24, 0xF7	; 247
     952:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     954:	80 81       	ld	r24, Z
     956:	8f 77       	andi	r24, 0x7F	; 127
     958:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     95a:	80 81       	ld	r24, Z
     95c:	88 7f       	andi	r24, 0xF8	; 248
     95e:	80 83       	st	Z, r24
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     960:	0a 9a       	sbi	0x01, 2	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     962:	02 9a       	sbi	0x00, 2	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     964:	e2 e1       	ldi	r30, 0x12	; 18
     966:	f4 e0       	ldi	r31, 0x04	; 4
     968:	80 81       	ld	r24, Z
     96a:	87 7f       	andi	r24, 0xF7	; 247
     96c:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     96e:	80 81       	ld	r24, Z
     970:	8f 77       	andi	r24, 0x7F	; 127
     972:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     974:	80 81       	ld	r24, Z
     976:	88 7f       	andi	r24, 0xF8	; 248
     978:	80 83       	st	Z, r24
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     97a:	09 9a       	sbi	0x01, 1	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     97c:	01 9a       	sbi	0x00, 1	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     97e:	e1 e1       	ldi	r30, 0x11	; 17
     980:	f4 e0       	ldi	r31, 0x04	; 4
     982:	80 81       	ld	r24, Z
     984:	87 7f       	andi	r24, 0xF7	; 247
     986:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     988:	80 81       	ld	r24, Z
     98a:	8f 77       	andi	r24, 0x7F	; 127
     98c:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     98e:	80 81       	ld	r24, Z
     990:	88 7f       	andi	r24, 0xF8	; 248
     992:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     994:	2a 98       	cbi	0x05, 2	; 5
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     996:	22 98       	cbi	0x04, 2	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     998:	e2 e3       	ldi	r30, 0x32	; 50
     99a:	f4 e0       	ldi	r31, 0x04	; 4
     99c:	80 81       	ld	r24, Z
     99e:	88 60       	ori	r24, 0x08	; 8
     9a0:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     9a2:	80 81       	ld	r24, Z
     9a4:	8f 77       	andi	r24, 0x7F	; 127
     9a6:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     9a8:	80 81       	ld	r24, Z
     9aa:	88 7f       	andi	r24, 0xF8	; 248
     9ac:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     9ae:	2e 98       	cbi	0x05, 6	; 5
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     9b0:	26 98       	cbi	0x04, 6	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     9b2:	e6 e3       	ldi	r30, 0x36	; 54
     9b4:	f4 e0       	ldi	r31, 0x04	; 4
     9b6:	80 81       	ld	r24, Z
     9b8:	88 60       	ori	r24, 0x08	; 8
     9ba:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     9bc:	80 81       	ld	r24, Z
     9be:	8f 77       	andi	r24, 0x7F	; 127
     9c0:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     9c2:	80 81       	ld	r24, Z
     9c4:	88 7f       	andi	r24, 0xF8	; 248
     9c6:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     9c8:	2d 98       	cbi	0x05, 5	; 5
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     9ca:	25 98       	cbi	0x04, 5	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     9cc:	e5 e3       	ldi	r30, 0x35	; 53
     9ce:	f4 e0       	ldi	r31, 0x04	; 4
     9d0:	80 81       	ld	r24, Z
     9d2:	88 60       	ori	r24, 0x08	; 8
     9d4:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     9d6:	80 81       	ld	r24, Z
     9d8:	8f 77       	andi	r24, 0x7F	; 127
     9da:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     9dc:	80 81       	ld	r24, Z
     9de:	88 7f       	andi	r24, 0xF8	; 248
     9e0:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     9e2:	2f 98       	cbi	0x05, 7	; 5
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     9e4:	27 98       	cbi	0x04, 7	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     9e6:	e7 e3       	ldi	r30, 0x37	; 55
     9e8:	f4 e0       	ldi	r31, 0x04	; 4
     9ea:	80 81       	ld	r24, Z
     9ec:	88 60       	ori	r24, 0x08	; 8
     9ee:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     9f0:	80 81       	ld	r24, Z
     9f2:	8f 77       	andi	r24, 0x7F	; 127
     9f4:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     9f6:	80 81       	ld	r24, Z
     9f8:	88 7f       	andi	r24, 0xF8	; 248
     9fa:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     9fc:	2c 98       	cbi	0x05, 4	; 5
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     9fe:	24 98       	cbi	0x04, 4	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     a00:	e4 e3       	ldi	r30, 0x34	; 52
     a02:	f4 e0       	ldi	r31, 0x04	; 4
     a04:	80 81       	ld	r24, Z
     a06:	88 60       	ori	r24, 0x08	; 8
     a08:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     a0a:	80 81       	ld	r24, Z
     a0c:	8f 77       	andi	r24, 0x7F	; 127
     a0e:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     a10:	80 81       	ld	r24, Z
     a12:	88 7f       	andi	r24, 0xF8	; 248
     a14:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     a16:	2b 98       	cbi	0x05, 3	; 5
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     a18:	23 98       	cbi	0x04, 3	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     a1a:	e3 e3       	ldi	r30, 0x33	; 51
     a1c:	f4 e0       	ldi	r31, 0x04	; 4
     a1e:	80 81       	ld	r24, Z
     a20:	88 60       	ori	r24, 0x08	; 8
     a22:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     a24:	80 81       	ld	r24, Z
     a26:	8f 77       	andi	r24, 0x7F	; 127
     a28:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     a2a:	80 81       	ld	r24, Z
     a2c:	88 7f       	andi	r24, 0xF8	; 248
     a2e:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     a30:	4d 98       	cbi	0x09, 5	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     a32:	45 9a       	sbi	0x08, 5	; 8
	// Set pin direction to output

	KEY_INT_set_level(false);
	KEY_INT_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
     a34:	0e 94 10 04 	call	0x820	; 0x820 <CLKCTRL_init>

	Timer_init();
     a38:	0e 94 24 06 	call	0xc48	; 0xc48 <Timer_init>

	ADC_0_initialization();
     a3c:	0e 94 37 04 	call	0x86e	; 0x86e <ADC_0_initialization>
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
     a40:	0e 94 33 06 	call	0xc66	; 0xc66 <TIMER_0_init>

	ADC_0_initialization();

	TIMER_0_initialization();

	CPUINT_init();
     a44:	0e 94 18 04 	call	0x830	; 0x830 <CPUINT_init>

	SLPCTRL_init();
     a48:	0e 94 31 06 	call	0xc62	; 0xc62 <SLPCTRL_init>

	I2C_0_initialization();
     a4c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <I2C_0_initialization>

	BOD_init();
     a50:	0e 94 0e 04 	call	0x81c	; 0x81c <BOD_init>
     a54:	08 95       	ret

00000a56 <I2C_0_init>:
 *
 * \return Nothing
 */
void I2C_0_send_nack(void)
{
	TWI0.SCTRLB = TWI_ACKACT_NACK_gc | TWI_SCMD_COMPTRANS_gc;
     a56:	e0 e1       	ldi	r30, 0x10	; 16
     a58:	f8 e0       	ldi	r31, 0x08	; 8
     a5a:	86 e4       	ldi	r24, 0x46	; 70
     a5c:	84 87       	std	Z+12, r24	; 0x0c
     a5e:	83 ee       	ldi	r24, 0xE3	; 227
     a60:	81 87       	std	Z+9, r24	; 0x09
     a62:	10 92 56 38 	sts	0x3856, r1	; 0x803856 <I2C_0_write_interrupt_handler>
     a66:	10 92 57 38 	sts	0x3857, r1	; 0x803857 <I2C_0_write_interrupt_handler+0x1>
     a6a:	10 92 58 38 	sts	0x3858, r1	; 0x803858 <I2C_0_read_interrupt_handler>
     a6e:	10 92 59 38 	sts	0x3859, r1	; 0x803859 <I2C_0_read_interrupt_handler+0x1>
     a72:	10 92 5a 38 	sts	0x385A, r1	; 0x80385a <I2C_0_address_interrupt_handler>
     a76:	10 92 5b 38 	sts	0x385B, r1	; 0x80385b <I2C_0_address_interrupt_handler+0x1>
     a7a:	10 92 54 38 	sts	0x3854, r1	; 0x803854 <I2C_0_stop_interrupt_handler>
     a7e:	10 92 55 38 	sts	0x3855, r1	; 0x803855 <I2C_0_stop_interrupt_handler+0x1>
     a82:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <I2C_0_collision_interrupt_handler>
     a86:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <I2C_0_collision_interrupt_handler+0x1>
     a8a:	10 92 5c 38 	sts	0x385C, r1	; 0x80385c <I2C_0_bus_error_interrupt_handler>
     a8e:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <I2C_0_bus_error_interrupt_handler+0x1>
     a92:	08 95       	ret

00000a94 <I2C_0_open>:
     a94:	e0 e1       	ldi	r30, 0x10	; 16
     a96:	f8 e0       	ldi	r31, 0x08	; 8
     a98:	81 85       	ldd	r24, Z+9	; 0x09
     a9a:	81 60       	ori	r24, 0x01	; 1
     a9c:	81 87       	std	Z+9, r24	; 0x09
     a9e:	08 95       	ret

00000aa0 <I2C_0_read>:
     aa0:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <gain_setting_int_cap+0x7f6beb>
     aa4:	08 95       	ret

00000aa6 <I2C_0_write>:
     aa6:	e0 e1       	ldi	r30, 0x10	; 16
     aa8:	f8 e0       	ldi	r31, 0x08	; 8
     aaa:	85 87       	std	Z+13, r24	; 0x0d
     aac:	82 85       	ldd	r24, Z+10	; 0x0a
     aae:	83 60       	ori	r24, 0x03	; 3
     ab0:	82 87       	std	Z+10, r24	; 0x0a
     ab2:	08 95       	ret

00000ab4 <I2C_0_send_ack>:
     ab4:	83 e0       	ldi	r24, 0x03	; 3
     ab6:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <gain_setting_int_cap+0x7f6be8>
     aba:	08 95       	ret

00000abc <I2C_0_goto_unaddressed>:
 * \return Nothing
 */
void I2C_0_goto_unaddressed(void)
{
	// Reset module
	TWI0.SSTATUS |= (TWI_DIF_bm | TWI_APIF_bm);
     abc:	e0 e1       	ldi	r30, 0x10	; 16
     abe:	f8 e0       	ldi	r31, 0x08	; 8
     ac0:	83 85       	ldd	r24, Z+11	; 0x0b
     ac2:	80 6c       	ori	r24, 0xC0	; 192
     ac4:	83 87       	std	Z+11, r24	; 0x0b
	TWI0.SCTRLB = TWI_SCMD_COMPTRANS_gc;
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	82 87       	std	Z+10, r24	; 0x0a
     aca:	08 95       	ret

00000acc <I2C_0_read_callback>:
}

// Read Event Interrupt Handlers
void I2C_0_read_callback(void)
{
	if (I2C_0_read_interrupt_handler) {
     acc:	e0 91 58 38 	lds	r30, 0x3858	; 0x803858 <I2C_0_read_interrupt_handler>
     ad0:	f0 91 59 38 	lds	r31, 0x3859	; 0x803859 <I2C_0_read_interrupt_handler+0x1>
     ad4:	30 97       	sbiw	r30, 0x00	; 0
     ad6:	09 f0       	breq	.+2      	; 0xada <I2C_0_read_callback+0xe>
		I2C_0_read_interrupt_handler();
     ad8:	09 95       	icall
     ada:	08 95       	ret

00000adc <I2C_0_set_read_callback>:
 *
 * \return Nothing
 */
void I2C_0_set_read_callback(I2C_0_callback handler)
{
	I2C_0_read_interrupt_handler = handler;
     adc:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <I2C_0_read_interrupt_handler>
     ae0:	90 93 59 38 	sts	0x3859, r25	; 0x803859 <I2C_0_read_interrupt_handler+0x1>
     ae4:	08 95       	ret

00000ae6 <I2C_0_write_callback>:
}

// Write Event Interrupt Handlers
void I2C_0_write_callback(void)
{
	if (I2C_0_write_interrupt_handler) {
     ae6:	e0 91 56 38 	lds	r30, 0x3856	; 0x803856 <I2C_0_write_interrupt_handler>
     aea:	f0 91 57 38 	lds	r31, 0x3857	; 0x803857 <I2C_0_write_interrupt_handler+0x1>
     aee:	30 97       	sbiw	r30, 0x00	; 0
     af0:	09 f0       	breq	.+2      	; 0xaf4 <I2C_0_write_callback+0xe>
		I2C_0_write_interrupt_handler();
     af2:	09 95       	icall
     af4:	08 95       	ret

00000af6 <I2C_0_set_write_callback>:
 *
 * \return Nothing
 */
void I2C_0_set_write_callback(I2C_0_callback handler)
{
	I2C_0_write_interrupt_handler = handler;
     af6:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <I2C_0_write_interrupt_handler>
     afa:	90 93 57 38 	sts	0x3857, r25	; 0x803857 <I2C_0_write_interrupt_handler+0x1>
     afe:	08 95       	ret

00000b00 <I2C_0_address_callback>:
}

// Address Event Interrupt Handlers
void I2C_0_address_callback(void)
{
	if (I2C_0_address_interrupt_handler) {
     b00:	e0 91 5a 38 	lds	r30, 0x385A	; 0x80385a <I2C_0_address_interrupt_handler>
     b04:	f0 91 5b 38 	lds	r31, 0x385B	; 0x80385b <I2C_0_address_interrupt_handler+0x1>
     b08:	30 97       	sbiw	r30, 0x00	; 0
     b0a:	09 f0       	breq	.+2      	; 0xb0e <I2C_0_address_callback+0xe>
		I2C_0_address_interrupt_handler();
     b0c:	09 95       	icall
     b0e:	08 95       	ret

00000b10 <I2C_0_set_address_callback>:
 *
 * \return Nothing
 */
void I2C_0_set_address_callback(I2C_0_callback handler)
{
	I2C_0_address_interrupt_handler = handler;
     b10:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <I2C_0_address_interrupt_handler>
     b14:	90 93 5b 38 	sts	0x385B, r25	; 0x80385b <I2C_0_address_interrupt_handler+0x1>
     b18:	08 95       	ret

00000b1a <I2C_0_stop_callback>:
}

// Stop Event Interrupt Handlers
void I2C_0_stop_callback(void)
{
	if (I2C_0_stop_interrupt_handler) {
     b1a:	e0 91 54 38 	lds	r30, 0x3854	; 0x803854 <I2C_0_stop_interrupt_handler>
     b1e:	f0 91 55 38 	lds	r31, 0x3855	; 0x803855 <I2C_0_stop_interrupt_handler+0x1>
     b22:	30 97       	sbiw	r30, 0x00	; 0
     b24:	09 f0       	breq	.+2      	; 0xb28 <I2C_0_stop_callback+0xe>
		I2C_0_stop_interrupt_handler();
     b26:	09 95       	icall
     b28:	08 95       	ret

00000b2a <I2C_0_set_stop_callback>:
 *
 * \return Nothing
 */
void I2C_0_set_stop_callback(I2C_0_callback handler)
{
	I2C_0_stop_interrupt_handler = handler;
     b2a:	80 93 54 38 	sts	0x3854, r24	; 0x803854 <I2C_0_stop_interrupt_handler>
     b2e:	90 93 55 38 	sts	0x3855, r25	; 0x803855 <I2C_0_stop_interrupt_handler+0x1>
     b32:	08 95       	ret

00000b34 <I2C_0_collision_callback>:
}

// Bus Collision Event Interrupt Handlers
void I2C_0_collision_callback(void)
{
	if (I2C_0_collision_interrupt_handler) {
     b34:	e0 91 5e 38 	lds	r30, 0x385E	; 0x80385e <I2C_0_collision_interrupt_handler>
     b38:	f0 91 5f 38 	lds	r31, 0x385F	; 0x80385f <I2C_0_collision_interrupt_handler+0x1>
     b3c:	30 97       	sbiw	r30, 0x00	; 0
     b3e:	09 f0       	breq	.+2      	; 0xb42 <I2C_0_collision_callback+0xe>
		I2C_0_collision_interrupt_handler();
     b40:	09 95       	icall
     b42:	08 95       	ret

00000b44 <I2C_0_set_collision_callback>:
 *
 * \return Nothing
 */
void I2C_0_set_collision_callback(I2C_0_callback handler)
{
	I2C_0_collision_interrupt_handler = handler;
     b44:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <I2C_0_collision_interrupt_handler>
     b48:	90 93 5f 38 	sts	0x385F, r25	; 0x80385f <I2C_0_collision_interrupt_handler+0x1>
     b4c:	08 95       	ret

00000b4e <I2C_0_bus_error_callback>:
}

// Bus Error Event Interrupt Handlers
void I2C_0_bus_error_callback(void)
{
	if (I2C_0_bus_error_interrupt_handler) {
     b4e:	e0 91 5c 38 	lds	r30, 0x385C	; 0x80385c <I2C_0_bus_error_interrupt_handler>
     b52:	f0 91 5d 38 	lds	r31, 0x385D	; 0x80385d <I2C_0_bus_error_interrupt_handler+0x1>
     b56:	30 97       	sbiw	r30, 0x00	; 0
     b58:	09 f0       	breq	.+2      	; 0xb5c <I2C_0_bus_error_callback+0xe>
		I2C_0_bus_error_interrupt_handler();
     b5a:	09 95       	icall
     b5c:	08 95       	ret

00000b5e <I2C_0_isr>:
 */
void I2C_0_isr()
{
	static char isFirstByte = true; // to bypass the NACK flag for the first byte in a transaction

	if (TWI0.SSTATUS & TWI_COLL_bm) {
     b5e:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <gain_setting_int_cap+0x7f6be9>
     b62:	83 ff       	sbrs	r24, 3
     b64:	03 c0       	rjmp	.+6      	; 0xb6c <I2C_0_isr+0xe>
		I2C_0_collision_callback();
     b66:	0e 94 9a 05 	call	0xb34	; 0xb34 <I2C_0_collision_callback>
		return;
     b6a:	08 95       	ret
	}

	if (TWI0.SSTATUS & TWI_BUSERR_bm) {
     b6c:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <gain_setting_int_cap+0x7f6be9>
     b70:	82 ff       	sbrs	r24, 2
     b72:	03 c0       	rjmp	.+6      	; 0xb7a <I2C_0_isr+0x1c>
		I2C_0_bus_error_callback();
     b74:	0e 94 a7 05 	call	0xb4e	; 0xb4e <I2C_0_bus_error_callback>
		return;
     b78:	08 95       	ret
	}

	if ((TWI0.SSTATUS & TWI_APIF_bm) && (TWI0.SSTATUS & TWI_AP_bm)) {
     b7a:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <gain_setting_int_cap+0x7f6be9>
     b7e:	86 ff       	sbrs	r24, 6
     b80:	0a c0       	rjmp	.+20     	; 0xb96 <I2C_0_isr+0x38>
     b82:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <gain_setting_int_cap+0x7f6be9>
     b86:	80 ff       	sbrs	r24, 0
     b88:	06 c0       	rjmp	.+12     	; 0xb96 <I2C_0_isr+0x38>
		I2C_0_address_callback();
     b8a:	0e 94 80 05 	call	0xb00	; 0xb00 <I2C_0_address_callback>
		isFirstByte = true;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <isFirstByte.3979>
		return;
     b94:	08 95       	ret
	}

	if (TWI0.SSTATUS & TWI_DIF_bm) {
     b96:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <gain_setting_int_cap+0x7f6be9>
     b9a:	88 23       	and	r24, r24
     b9c:	d4 f4       	brge	.+52     	; 0xbd2 <I2C_0_isr+0x74>
		if (TWI0.SSTATUS & TWI_DIR_bm) {
     b9e:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <gain_setting_int_cap+0x7f6be9>
     ba2:	81 ff       	sbrs	r24, 1
     ba4:	13 c0       	rjmp	.+38     	; 0xbcc <I2C_0_isr+0x6e>
			// Master wishes to read from slave
			if (!(TWI0.SSTATUS & TWI_RXACK_bm) || isFirstByte) {
     ba6:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <gain_setting_int_cap+0x7f6be9>
     baa:	84 ff       	sbrs	r24, 4
     bac:	04 c0       	rjmp	.+8      	; 0xbb6 <I2C_0_isr+0x58>
     bae:	80 91 28 38 	lds	r24, 0x3828	; 0x803828 <isFirstByte.3979>
     bb2:	88 23       	and	r24, r24
     bb4:	41 f0       	breq	.+16     	; 0xbc6 <I2C_0_isr+0x68>
				// Received ACK from master or First byte of transaction
				isFirstByte = false;
     bb6:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <isFirstByte.3979>
				I2C_0_read_callback();
     bba:	0e 94 66 05 	call	0xacc	; 0xacc <I2C_0_read_callback>
				TWI0.SCTRLB = TWI_ACKACT_ACK_gc | TWI_SCMD_RESPONSE_gc;
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <gain_setting_int_cap+0x7f6be8>
     bc4:	08 95       	ret
			} else {
				// Received NACK from master
				I2C_0_goto_unaddressed();
     bc6:	0e 94 5e 05 	call	0xabc	; 0xabc <I2C_0_goto_unaddressed>
     bca:	08 95       	ret
			}
		} else // Master wishes to write to slave
		{
			I2C_0_write_callback();
     bcc:	0e 94 73 05 	call	0xae6	; 0xae6 <I2C_0_write_callback>
     bd0:	08 95       	ret
		}
		return;
	}

	// Check if STOP was received
	if ((TWI0.SSTATUS & TWI_APIF_bm) && (!(TWI0.SSTATUS & TWI_AP_bm))) {
     bd2:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <gain_setting_int_cap+0x7f6be9>
     bd6:	86 ff       	sbrs	r24, 6
     bd8:	09 c0       	rjmp	.+18     	; 0xbec <I2C_0_isr+0x8e>
     bda:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <gain_setting_int_cap+0x7f6be9>
     bde:	80 fd       	sbrc	r24, 0
     be0:	05 c0       	rjmp	.+10     	; 0xbec <I2C_0_isr+0x8e>
		I2C_0_stop_callback();
     be2:	0e 94 8d 05 	call	0xb1a	; 0xb1a <I2C_0_stop_callback>
		TWI0.SCTRLB = TWI_SCMD_COMPTRANS_gc;
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <gain_setting_int_cap+0x7f6be8>
     bec:	08 95       	ret

00000bee <__vector_24>:
		return;
	}
}

ISR(TWI0_TWIS_vect)
{
     bee:	1f 92       	push	r1
     bf0:	0f 92       	push	r0
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	0f 92       	push	r0
     bf6:	11 24       	eor	r1, r1
     bf8:	2f 93       	push	r18
     bfa:	3f 93       	push	r19
     bfc:	4f 93       	push	r20
     bfe:	5f 93       	push	r21
     c00:	6f 93       	push	r22
     c02:	7f 93       	push	r23
     c04:	8f 93       	push	r24
     c06:	9f 93       	push	r25
     c08:	af 93       	push	r26
     c0a:	bf 93       	push	r27
     c0c:	ef 93       	push	r30
     c0e:	ff 93       	push	r31
	I2C_0_isr();
     c10:	0e 94 af 05 	call	0xb5e	; 0xb5e <I2C_0_isr>
}
     c14:	ff 91       	pop	r31
     c16:	ef 91       	pop	r30
     c18:	bf 91       	pop	r27
     c1a:	af 91       	pop	r26
     c1c:	9f 91       	pop	r25
     c1e:	8f 91       	pop	r24
     c20:	7f 91       	pop	r23
     c22:	6f 91       	pop	r22
     c24:	5f 91       	pop	r21
     c26:	4f 91       	pop	r20
     c28:	3f 91       	pop	r19
     c2a:	2f 91       	pop	r18
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	0f 90       	pop	r0
     c32:	1f 90       	pop	r1
     c34:	18 95       	reti

00000c36 <I2C_0_set_bus_error_callback>:
 *
 * \return Nothing
 */
void I2C_0_set_bus_error_callback(I2C_0_callback handler)
{
	I2C_0_bus_error_interrupt_handler = handler;
     c36:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <I2C_0_bus_error_interrupt_handler>
     c3a:	90 93 5d 38 	sts	0x385D, r25	; 0x80385d <I2C_0_bus_error_interrupt_handler+0x1>
     c3e:	08 95       	ret

00000c40 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     c40:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     c42:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     c44:	40 83       	st	Z, r20
	ret                             // Return to caller
     c46:	08 95       	ret

00000c48 <Timer_init>:
 * \return Initialization status.
 */
int8_t Timer_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     c48:	e0 e4       	ldi	r30, 0x40	; 64
     c4a:	f1 e0       	ldi	r31, 0x01	; 1
     c4c:	81 81       	ldd	r24, Z+1	; 0x01
     c4e:	81 11       	cpse	r24, r1
     c50:	fd cf       	rjmp	.-6      	; 0xc4c <Timer_init+0x4>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
     c52:	e0 e4       	ldi	r30, 0x40	; 64
     c54:	f1 e0       	ldi	r31, 0x01	; 1
     c56:	81 e8       	ldi	r24, 0x81	; 129
     c58:	80 83       	st	Z, r24

	// RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 1 << RTC_CMP_bp    /* Compare Match Interrupt enable: enabled */
     c5a:	82 e0       	ldi	r24, 0x02	; 2
     c5c:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	08 95       	ret

00000c62 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	08 95       	ret

00000c66 <TIMER_0_init>:

	// TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
	//		 | 0 << TCA_SINGLE_ENABLE_bp /* Module Enable: disabled */;

	return 0;
}
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	08 95       	ret

00000c6a <check_for_aks_block>:
     c6a:	cf 92       	push	r12
     c6c:	df 92       	push	r13
     c6e:	ff 92       	push	r15
     c70:	0f 93       	push	r16
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	ec 01       	movw	r28, r24
     c7a:	ae 81       	ldd	r26, Y+6	; 0x06
     c7c:	bf 81       	ldd	r27, Y+7	; 0x07
     c7e:	eb 01       	movw	r28, r22
     c80:	cc 0f       	add	r28, r28
     c82:	dd 1f       	adc	r29, r29
     c84:	c6 0f       	add	r28, r22
     c86:	d7 1f       	adc	r29, r23
     c88:	ca 0f       	add	r28, r26
     c8a:	db 1f       	adc	r29, r27
     c8c:	fa 80       	ldd	r15, Y+2	; 0x02
     c8e:	fc 01       	movw	r30, r24
     c90:	44 81       	ldd	r20, Z+4	; 0x04
     c92:	55 81       	ldd	r21, Z+5	; 0x05
     c94:	e6 e0       	ldi	r30, 0x06	; 6
     c96:	e6 9f       	mul	r30, r22
     c98:	90 01       	movw	r18, r0
     c9a:	e7 9f       	mul	r30, r23
     c9c:	30 0d       	add	r19, r0
     c9e:	11 24       	eor	r1, r1
     ca0:	8a 01       	movw	r16, r20
     ca2:	02 0f       	add	r16, r18
     ca4:	13 1f       	adc	r17, r19
     ca6:	f8 01       	movw	r30, r16
     ca8:	22 81       	ldd	r18, Z+2	; 0x02
     caa:	33 81       	ldd	r19, Z+3	; 0x03
     cac:	f9 01       	movw	r30, r18
     cae:	21 81       	ldd	r18, Z+1	; 0x01
     cb0:	32 81       	ldd	r19, Z+2	; 0x02
     cb2:	f8 01       	movw	r30, r16
     cb4:	04 81       	ldd	r16, Z+4	; 0x04
     cb6:	15 81       	ldd	r17, Z+5	; 0x05
     cb8:	20 1b       	sub	r18, r16
     cba:	31 0b       	sbc	r19, r17
     cbc:	e8 81       	ld	r30, Y
     cbe:	2e 1b       	sub	r18, r30
     cc0:	31 09       	sbc	r19, r1
     cc2:	ec 01       	movw	r28, r24
     cc4:	ea 81       	ldd	r30, Y+2	; 0x02
     cc6:	fb 81       	ldd	r31, Y+3	; 0x03
     cc8:	00 81       	ld	r16, Z
     cca:	11 81       	ldd	r17, Z+1	; 0x01
     ccc:	fa 01       	movw	r30, r20
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	40 17       	cp	r20, r16
     cd4:	51 07       	cpc	r21, r17
     cd6:	39 f1       	breq	.+78     	; 0xd26 <check_for_aks_block+0xbc>
     cd8:	46 17       	cp	r20, r22
     cda:	57 07       	cpc	r21, r23
     cdc:	f9 f0       	breq	.+62     	; 0xd1c <check_for_aks_block+0xb2>
     cde:	12 96       	adiw	r26, 0x02	; 2
     ce0:	8c 91       	ld	r24, X
     ce2:	12 97       	sbiw	r26, 0x02	; 2
     ce4:	f8 12       	cpse	r15, r24
     ce6:	1a c0       	rjmp	.+52     	; 0xd1c <check_for_aks_block+0xb2>
     ce8:	80 81       	ld	r24, Z
     cea:	85 58       	subi	r24, 0x85	; 133
     cec:	82 30       	cpi	r24, 0x02	; 2
     cee:	e8 f0       	brcs	.+58     	; 0xd2a <check_for_aks_block+0xc0>
     cf0:	c4 80       	ldd	r12, Z+4	; 0x04
     cf2:	d5 80       	ldd	r13, Z+5	; 0x05
     cf4:	82 81       	ldd	r24, Z+2	; 0x02
     cf6:	93 81       	ldd	r25, Z+3	; 0x03
     cf8:	ec 01       	movw	r28, r24
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	9a 81       	ldd	r25, Y+2	; 0x02
     cfe:	c8 16       	cp	r12, r24
     d00:	d9 06       	cpc	r13, r25
     d02:	60 f4       	brcc	.+24     	; 0xd1c <check_for_aks_block+0xb2>
     d04:	8c 19       	sub	r24, r12
     d06:	9d 09       	sbc	r25, r13
     d08:	cc 91       	ld	r28, X
     d0a:	d0 e0       	ldi	r29, 0x00	; 0
     d0c:	c8 17       	cp	r28, r24
     d0e:	d9 07       	cpc	r29, r25
     d10:	28 f4       	brcc	.+10     	; 0xd1c <check_for_aks_block+0xb2>
     d12:	8c 1b       	sub	r24, r28
     d14:	9d 0b       	sbc	r25, r29
     d16:	28 17       	cp	r18, r24
     d18:	39 07       	cpc	r19, r25
     d1a:	38 f0       	brcs	.+14     	; 0xd2a <check_for_aks_block+0xc0>
     d1c:	4f 5f       	subi	r20, 0xFF	; 255
     d1e:	5f 4f       	sbci	r21, 0xFF	; 255
     d20:	13 96       	adiw	r26, 0x03	; 3
     d22:	36 96       	adiw	r30, 0x06	; 6
     d24:	d6 cf       	rjmp	.-84     	; 0xcd2 <check_for_aks_block+0x68>
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <check_for_aks_block+0xc2>
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	df 90       	pop	r13
     d38:	cf 90       	pop	r12
     d3a:	08 95       	ret

00000d3c <qtm_update_qtlib_timer>:
     d3c:	20 91 37 38 	lds	r18, 0x3837	; 0x803837 <qtm_local_ms_timecount>
     d40:	30 91 38 38 	lds	r19, 0x3838	; 0x803838 <qtm_local_ms_timecount+0x1>
     d44:	82 0f       	add	r24, r18
     d46:	93 1f       	adc	r25, r19
     d48:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <qtm_local_ms_timecount>
     d4c:	90 93 38 38 	sts	0x3838, r25	; 0x803838 <qtm_local_ms_timecount+0x1>
     d50:	08 95       	ret

00000d52 <qtm_init_sensor_key>:
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	d9 f0       	breq	.+54     	; 0xd8c <qtm_init_sensor_key+0x3a>
     d56:	41 15       	cp	r20, r1
     d58:	51 05       	cpc	r21, r1
     d5a:	c1 f0       	breq	.+48     	; 0xd8c <qtm_init_sensor_key+0x3a>
     d5c:	26 e0       	ldi	r18, 0x06	; 6
     d5e:	62 9f       	mul	r22, r18
     d60:	b0 01       	movw	r22, r0
     d62:	11 24       	eor	r1, r1
     d64:	dc 01       	movw	r26, r24
     d66:	14 96       	adiw	r26, 0x04	; 4
     d68:	ed 91       	ld	r30, X+
     d6a:	fc 91       	ld	r31, X
     d6c:	15 97       	sbiw	r26, 0x05	; 5
     d6e:	e6 0f       	add	r30, r22
     d70:	f7 1f       	adc	r31, r23
     d72:	21 e0       	ldi	r18, 0x01	; 1
     d74:	20 83       	st	Z, r18
     d76:	14 96       	adiw	r26, 0x04	; 4
     d78:	8d 91       	ld	r24, X+
     d7a:	9c 91       	ld	r25, X
     d7c:	15 97       	sbiw	r26, 0x05	; 5
     d7e:	fc 01       	movw	r30, r24
     d80:	e6 0f       	add	r30, r22
     d82:	f7 1f       	adc	r31, r23
     d84:	42 83       	std	Z+2, r20	; 0x02
     d86:	53 83       	std	Z+3, r21	; 0x03
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	08 95       	ret
     d8c:	8b e0       	ldi	r24, 0x0B	; 11
     d8e:	08 95       	ret

00000d90 <qtm_key_sensors_process>:
     d90:	2f 92       	push	r2
     d92:	3f 92       	push	r3
     d94:	4f 92       	push	r4
     d96:	5f 92       	push	r5
     d98:	6f 92       	push	r6
     d9a:	7f 92       	push	r7
     d9c:	8f 92       	push	r8
     d9e:	9f 92       	push	r9
     da0:	af 92       	push	r10
     da2:	bf 92       	push	r11
     da4:	cf 92       	push	r12
     da6:	df 92       	push	r13
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	09 f4       	brne	.+2      	; 0xdba <qtm_key_sensors_process+0x2a>
     db8:	7d c3       	rjmp	.+1786   	; 0x14b4 <qtm_key_sensors_process+0x724>
     dba:	ec 01       	movw	r28, r24
     dbc:	a1 2c       	mov	r10, r1
     dbe:	b1 2c       	mov	r11, r1
     dc0:	81 2c       	mov	r8, r1
     dc2:	91 2c       	mov	r9, r1
     dc4:	21 2c       	mov	r2, r1
     dc6:	d1 2c       	mov	r13, r1
     dc8:	33 e0       	ldi	r19, 0x03	; 3
     dca:	c3 2e       	mov	r12, r19
     dcc:	45 e8       	ldi	r20, 0x85	; 133
     dce:	64 2e       	mov	r6, r20
     dd0:	56 e8       	ldi	r21, 0x86	; 134
     dd2:	75 2e       	mov	r7, r21
     dd4:	67 e0       	ldi	r22, 0x07	; 7
     dd6:	36 2e       	mov	r3, r22
     dd8:	72 e0       	ldi	r23, 0x02	; 2
     dda:	47 2e       	mov	r4, r23
     ddc:	e8 e0       	ldi	r30, 0x08	; 8
     dde:	5e 2e       	mov	r5, r30
     de0:	ea 81       	ldd	r30, Y+2	; 0x02
     de2:	fb 81       	ldd	r31, Y+3	; 0x03
     de4:	80 81       	ld	r24, Z
     de6:	91 81       	ldd	r25, Z+1	; 0x01
     de8:	88 16       	cp	r8, r24
     dea:	99 06       	cpc	r9, r25
     dec:	08 f0       	brcs	.+2      	; 0xdf0 <qtm_key_sensors_process+0x60>
     dee:	a5 c1       	rjmp	.+842    	; 0x113a <qtm_key_sensors_process+0x3aa>
     df0:	75 01       	movw	r14, r10
     df2:	ee 0c       	add	r14, r14
     df4:	ff 1c       	adc	r15, r15
     df6:	0c 81       	ldd	r16, Y+4	; 0x04
     df8:	1d 81       	ldd	r17, Y+5	; 0x05
     dfa:	0e 0d       	add	r16, r14
     dfc:	1f 1d       	adc	r17, r15
     dfe:	d8 01       	movw	r26, r16
     e00:	8c 91       	ld	r24, X
     e02:	84 30       	cpi	r24, 0x04	; 4
     e04:	09 f4       	brne	.+2      	; 0xe08 <qtm_key_sensors_process+0x78>
     e06:	a2 c0       	rjmp	.+324    	; 0xf4c <qtm_key_sensors_process+0x1bc>
     e08:	38 f4       	brcc	.+14     	; 0xe18 <qtm_key_sensors_process+0x88>
     e0a:	82 30       	cpi	r24, 0x02	; 2
     e0c:	01 f1       	breq	.+64     	; 0xe4e <qtm_key_sensors_process+0xbe>
     e0e:	08 f0       	brcs	.+2      	; 0xe12 <qtm_key_sensors_process+0x82>
     e10:	49 c0       	rjmp	.+146    	; 0xea4 <qtm_key_sensors_process+0x114>
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	59 f0       	breq	.+22     	; 0xe2c <qtm_key_sensors_process+0x9c>
     e16:	8a c1       	rjmp	.+788    	; 0x112c <qtm_key_sensors_process+0x39c>
     e18:	85 38       	cpi	r24, 0x85	; 133
     e1a:	09 f4       	brne	.+2      	; 0xe1e <qtm_key_sensors_process+0x8e>
     e1c:	c2 c0       	rjmp	.+388    	; 0xfa2 <qtm_key_sensors_process+0x212>
     e1e:	86 38       	cpi	r24, 0x86	; 134
     e20:	09 f4       	brne	.+2      	; 0xe24 <qtm_key_sensors_process+0x94>
     e22:	f6 c0       	rjmp	.+492    	; 0x1010 <qtm_key_sensors_process+0x280>
     e24:	87 30       	cpi	r24, 0x07	; 7
     e26:	09 f0       	breq	.+2      	; 0xe2a <qtm_key_sensors_process+0x9a>
     e28:	81 c1       	rjmp	.+770    	; 0x112c <qtm_key_sensors_process+0x39c>
     e2a:	37 c1       	rjmp	.+622    	; 0x109a <qtm_key_sensors_process+0x30a>
     e2c:	d8 01       	movw	r26, r16
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	ed 91       	ld	r30, X+
     e32:	fc 91       	ld	r31, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	80 81       	ld	r24, Z
     e38:	8e 71       	andi	r24, 0x1E	; 30
     e3a:	09 f0       	breq	.+2      	; 0xe3e <qtm_key_sensors_process+0xae>
     e3c:	69 c1       	rjmp	.+722    	; 0x1110 <qtm_key_sensors_process+0x380>
     e3e:	4c 92       	st	X, r4
     e40:	8c 81       	ldd	r24, Y+4	; 0x04
     e42:	9d 81       	ldd	r25, Y+5	; 0x05
     e44:	fc 01       	movw	r30, r24
     e46:	ee 0d       	add	r30, r14
     e48:	ff 1d       	adc	r31, r15
     e4a:	51 82       	std	Z+1, r5	; 0x01
     e4c:	61 c1       	rjmp	.+706    	; 0x1110 <qtm_key_sensors_process+0x380>
     e4e:	f8 01       	movw	r30, r16
     e50:	21 81       	ldd	r18, Z+1	; 0x01
     e52:	22 23       	and	r18, r18
     e54:	29 f1       	breq	.+74     	; 0xea0 <qtm_key_sensors_process+0x110>
     e56:	02 80       	ldd	r0, Z+2	; 0x02
     e58:	f3 81       	ldd	r31, Z+3	; 0x03
     e5a:	e0 2d       	mov	r30, r0
     e5c:	25 30       	cpi	r18, 0x05	; 5
     e5e:	20 f0       	brcs	.+8      	; 0xe68 <qtm_key_sensors_process+0xd8>
     e60:	81 81       	ldd	r24, Z+1	; 0x01
     e62:	92 81       	ldd	r25, Z+2	; 0x02
     e64:	d8 01       	movw	r26, r16
     e66:	0e c0       	rjmp	.+28     	; 0xe84 <qtm_key_sensors_process+0xf4>
     e68:	d8 01       	movw	r26, r16
     e6a:	14 96       	adiw	r26, 0x04	; 4
     e6c:	8d 91       	ld	r24, X+
     e6e:	9c 91       	ld	r25, X
     e70:	15 97       	sbiw	r26, 0x05	; 5
     e72:	41 81       	ldd	r20, Z+1	; 0x01
     e74:	52 81       	ldd	r21, Z+2	; 0x02
     e76:	84 17       	cp	r24, r20
     e78:	95 07       	cpc	r25, r21
     e7a:	69 f0       	breq	.+26     	; 0xe96 <qtm_key_sensors_process+0x106>
     e7c:	48 17       	cp	r20, r24
     e7e:	59 07       	cpc	r21, r25
     e80:	30 f4       	brcc	.+12     	; 0xe8e <qtm_key_sensors_process+0xfe>
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	14 96       	adiw	r26, 0x04	; 4
     e86:	8d 93       	st	X+, r24
     e88:	9c 93       	st	X, r25
     e8a:	15 97       	sbiw	r26, 0x05	; 5
     e8c:	04 c0       	rjmp	.+8      	; 0xe96 <qtm_key_sensors_process+0x106>
     e8e:	01 96       	adiw	r24, 0x01	; 1
     e90:	f8 01       	movw	r30, r16
     e92:	84 83       	std	Z+4, r24	; 0x04
     e94:	95 83       	std	Z+5, r25	; 0x05
     e96:	21 50       	subi	r18, 0x01	; 1
     e98:	d8 01       	movw	r26, r16
     e9a:	11 96       	adiw	r26, 0x01	; 1
     e9c:	2c 93       	st	X, r18
     e9e:	38 c1       	rjmp	.+624    	; 0x1110 <qtm_key_sensors_process+0x380>
     ea0:	f8 01       	movw	r30, r16
     ea2:	31 c1       	rjmp	.+610    	; 0x1106 <qtm_key_sensors_process+0x376>
     ea4:	d8 01       	movw	r26, r16
     ea6:	14 96       	adiw	r26, 0x04	; 4
     ea8:	2d 91       	ld	r18, X+
     eaa:	3c 91       	ld	r19, X
     eac:	15 97       	sbiw	r26, 0x05	; 5
     eae:	12 96       	adiw	r26, 0x02	; 2
     eb0:	8d 91       	ld	r24, X+
     eb2:	9c 91       	ld	r25, X
     eb4:	13 97       	sbiw	r26, 0x03	; 3
     eb6:	dc 01       	movw	r26, r24
     eb8:	11 96       	adiw	r26, 0x01	; 1
     eba:	4d 91       	ld	r20, X+
     ebc:	5c 91       	ld	r21, X
     ebe:	12 97       	sbiw	r26, 0x02	; 2
     ec0:	24 17       	cp	r18, r20
     ec2:	35 07       	cpc	r19, r21
     ec4:	09 f4       	brne	.+2      	; 0xec8 <qtm_key_sensors_process+0x138>
     ec6:	32 c1       	rjmp	.+612    	; 0x112c <qtm_key_sensors_process+0x39c>
     ec8:	8e 81       	ldd	r24, Y+6	; 0x06
     eca:	9f 81       	ldd	r25, Y+7	; 0x07
     ecc:	42 17       	cp	r20, r18
     ece:	53 07       	cpc	r21, r19
     ed0:	e0 f4       	brcc	.+56     	; 0xf0a <qtm_key_sensors_process+0x17a>
     ed2:	24 1b       	sub	r18, r20
     ed4:	35 0b       	sbc	r19, r21
     ed6:	dc 01       	movw	r26, r24
     ed8:	aa 0d       	add	r26, r10
     eda:	bb 1d       	adc	r27, r11
     edc:	8c 91       	ld	r24, X
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	05 80       	ldd	r0, Z+5	; 0x05
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <qtm_key_sensors_process+0x158>
     ee4:	95 95       	asr	r25
     ee6:	87 95       	ror	r24
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <qtm_key_sensors_process+0x154>
     eec:	99 27       	eor	r25, r25
     eee:	28 17       	cp	r18, r24
     ef0:	39 07       	cpc	r19, r25
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <qtm_key_sensors_process+0x166>
     ef4:	1b c1       	rjmp	.+566    	; 0x112c <qtm_key_sensors_process+0x39c>
     ef6:	84 81       	ldd	r24, Z+4	; 0x04
     ef8:	88 23       	and	r24, r24
     efa:	09 f4       	brne	.+2      	; 0xefe <qtm_key_sensors_process+0x16e>
     efc:	17 c1       	rjmp	.+558    	; 0x112c <qtm_key_sensors_process+0x39c>
     efe:	f8 01       	movw	r30, r16
     f00:	30 82       	st	Z, r3
     f02:	ea 81       	ldd	r30, Y+2	; 0x02
     f04:	fb 81       	ldd	r31, Y+3	; 0x03
     f06:	24 81       	ldd	r18, Z+4	; 0x04
     f08:	1a c0       	rjmp	.+52     	; 0xf3e <qtm_key_sensors_process+0x1ae>
     f0a:	fc 01       	movw	r30, r24
     f0c:	ea 0d       	add	r30, r10
     f0e:	fb 1d       	adc	r31, r11
     f10:	42 1b       	sub	r20, r18
     f12:	53 0b       	sbc	r21, r19
     f14:	80 81       	ld	r24, Z
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	48 17       	cp	r20, r24
     f1a:	59 07       	cpc	r21, r25
     f1c:	08 f4       	brcc	.+2      	; 0xf20 <qtm_key_sensors_process+0x190>
     f1e:	06 c1       	rjmp	.+524    	; 0x112c <qtm_key_sensors_process+0x39c>
     f20:	82 81       	ldd	r24, Z+2	; 0x02
     f22:	88 23       	and	r24, r24
     f24:	31 f0       	breq	.+12     	; 0xf32 <qtm_key_sensors_process+0x1a2>
     f26:	b4 01       	movw	r22, r8
     f28:	ce 01       	movw	r24, r28
     f2a:	0e 94 35 06 	call	0xc6a	; 0xc6a <check_for_aks_block>
     f2e:	81 11       	cpse	r24, r1
     f30:	fd c0       	rjmp	.+506    	; 0x112c <qtm_key_sensors_process+0x39c>
     f32:	e4 e0       	ldi	r30, 0x04	; 4
     f34:	d8 01       	movw	r26, r16
     f36:	ec 93       	st	X, r30
     f38:	ea 81       	ldd	r30, Y+2	; 0x02
     f3a:	fb 81       	ldd	r31, Y+3	; 0x03
     f3c:	22 81       	ldd	r18, Z+2	; 0x02
     f3e:	8c 81       	ldd	r24, Y+4	; 0x04
     f40:	9d 81       	ldd	r25, Y+5	; 0x05
     f42:	fc 01       	movw	r30, r24
     f44:	ee 0d       	add	r30, r14
     f46:	ff 1d       	adc	r31, r15
     f48:	21 83       	std	Z+1, r18	; 0x01
     f4a:	e2 c0       	rjmp	.+452    	; 0x1110 <qtm_key_sensors_process+0x380>
     f4c:	d8 01       	movw	r26, r16
     f4e:	14 96       	adiw	r26, 0x04	; 4
     f50:	2d 91       	ld	r18, X+
     f52:	3c 91       	ld	r19, X
     f54:	15 97       	sbiw	r26, 0x05	; 5
     f56:	12 96       	adiw	r26, 0x02	; 2
     f58:	ed 91       	ld	r30, X+
     f5a:	fc 91       	ld	r31, X
     f5c:	13 97       	sbiw	r26, 0x03	; 3
     f5e:	81 81       	ldd	r24, Z+1	; 0x01
     f60:	92 81       	ldd	r25, Z+2	; 0x02
     f62:	82 17       	cp	r24, r18
     f64:	93 07       	cpc	r25, r19
     f66:	08 f4       	brcc	.+2      	; 0xf6a <qtm_key_sensors_process+0x1da>
     f68:	d7 c0       	rjmp	.+430    	; 0x1118 <qtm_key_sensors_process+0x388>
     f6a:	ee 81       	ldd	r30, Y+6	; 0x06
     f6c:	ff 81       	ldd	r31, Y+7	; 0x07
     f6e:	ea 0d       	add	r30, r10
     f70:	fb 1d       	adc	r31, r11
     f72:	82 1b       	sub	r24, r18
     f74:	93 0b       	sbc	r25, r19
     f76:	20 81       	ld	r18, Z
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	28 17       	cp	r18, r24
     f7c:	39 07       	cpc	r19, r25
     f7e:	08 f0       	brcs	.+2      	; 0xf82 <qtm_key_sensors_process+0x1f2>
     f80:	af c0       	rjmp	.+350    	; 0x10e0 <qtm_key_sensors_process+0x350>
     f82:	82 81       	ldd	r24, Z+2	; 0x02
     f84:	88 23       	and	r24, r24
     f86:	31 f0       	breq	.+12     	; 0xf94 <qtm_key_sensors_process+0x204>
     f88:	b4 01       	movw	r22, r8
     f8a:	ce 01       	movw	r24, r28
     f8c:	0e 94 35 06 	call	0xc6a	; 0xc6a <check_for_aks_block>
     f90:	81 11       	cpse	r24, r1
     f92:	cc c0       	rjmp	.+408    	; 0x112c <qtm_key_sensors_process+0x39c>
     f94:	f8 01       	movw	r30, r16
     f96:	81 81       	ldd	r24, Z+1	; 0x01
     f98:	88 23       	and	r24, r24
     f9a:	09 f4       	brne	.+2      	; 0xf9e <qtm_key_sensors_process+0x20e>
     f9c:	67 c0       	rjmp	.+206    	; 0x106c <qtm_key_sensors_process+0x2dc>
     f9e:	81 50       	subi	r24, 0x01	; 1
     fa0:	b6 c0       	rjmp	.+364    	; 0x110e <qtm_key_sensors_process+0x37e>
     fa2:	a8 81       	ld	r26, Y
     fa4:	b9 81       	ldd	r27, Y+1	; 0x01
     fa6:	80 85       	ldd	r24, Z+8	; 0x08
     fa8:	13 96       	adiw	r26, 0x03	; 3
     faa:	8c 93       	st	X, r24
     fac:	ec 81       	ldd	r30, Y+4	; 0x04
     fae:	fd 81       	ldd	r31, Y+5	; 0x05
     fb0:	ee 0d       	add	r30, r14
     fb2:	ff 1d       	adc	r31, r15
     fb4:	44 81       	ldd	r20, Z+4	; 0x04
     fb6:	55 81       	ldd	r21, Z+5	; 0x05
     fb8:	a2 81       	ldd	r26, Z+2	; 0x02
     fba:	b3 81       	ldd	r27, Z+3	; 0x03
     fbc:	11 96       	adiw	r26, 0x01	; 1
     fbe:	8d 91       	ld	r24, X+
     fc0:	9c 91       	ld	r25, X
     fc2:	12 97       	sbiw	r26, 0x02	; 2
     fc4:	84 17       	cp	r24, r20
     fc6:	95 07       	cpc	r25, r21
     fc8:	c0 f0       	brcs	.+48     	; 0xffa <qtm_key_sensors_process+0x26a>
     fca:	ae 81       	ldd	r26, Y+6	; 0x06
     fcc:	bf 81       	ldd	r27, Y+7	; 0x07
     fce:	aa 0d       	add	r26, r10
     fd0:	bb 1d       	adc	r27, r11
     fd2:	6c 91       	ld	r22, X
     fd4:	26 2f       	mov	r18, r22
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	11 96       	adiw	r26, 0x01	; 1
     fda:	7c 91       	ld	r23, X
     fdc:	7f 5f       	subi	r23, 0xFF	; 255
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <qtm_key_sensors_process+0x254>
     fe0:	35 95       	asr	r19
     fe2:	27 95       	ror	r18
     fe4:	7a 95       	dec	r23
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <qtm_key_sensors_process+0x250>
     fe8:	84 1b       	sub	r24, r20
     fea:	95 0b       	sbc	r25, r21
     fec:	62 1b       	sub	r22, r18
     fee:	26 2f       	mov	r18, r22
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	28 17       	cp	r18, r24
     ff4:	39 07       	cpc	r19, r25
     ff6:	08 f4       	brcc	.+2      	; 0xffa <qtm_key_sensors_process+0x26a>
     ff8:	97 c0       	rjmp	.+302    	; 0x1128 <qtm_key_sensors_process+0x398>
     ffa:	70 82       	st	Z, r7
     ffc:	ea 81       	ldd	r30, Y+2	; 0x02
     ffe:	fb 81       	ldd	r31, Y+3	; 0x03
    1000:	22 81       	ldd	r18, Z+2	; 0x02
    1002:	8c 81       	ldd	r24, Y+4	; 0x04
    1004:	9d 81       	ldd	r25, Y+5	; 0x05
    1006:	fc 01       	movw	r30, r24
    1008:	ee 0d       	add	r30, r14
    100a:	ff 1d       	adc	r31, r15
    100c:	21 83       	std	Z+1, r18	; 0x01
    100e:	42 c0       	rjmp	.+132    	; 0x1094 <qtm_key_sensors_process+0x304>
    1010:	d8 01       	movw	r26, r16
    1012:	14 96       	adiw	r26, 0x04	; 4
    1014:	6d 91       	ld	r22, X+
    1016:	7c 91       	ld	r23, X
    1018:	15 97       	sbiw	r26, 0x05	; 5
    101a:	12 96       	adiw	r26, 0x02	; 2
    101c:	ed 91       	ld	r30, X+
    101e:	fc 91       	ld	r31, X
    1020:	13 97       	sbiw	r26, 0x03	; 3
    1022:	21 81       	ldd	r18, Z+1	; 0x01
    1024:	32 81       	ldd	r19, Z+2	; 0x02
    1026:	26 17       	cp	r18, r22
    1028:	37 07       	cpc	r19, r23
    102a:	58 f4       	brcc	.+22     	; 0x1042 <qtm_key_sensors_process+0x2b2>
    102c:	11 96       	adiw	r26, 0x01	; 1
    102e:	8c 91       	ld	r24, X
    1030:	11 97       	sbiw	r26, 0x01	; 1
    1032:	81 11       	cpse	r24, r1
    1034:	02 c0       	rjmp	.+4      	; 0x103a <qtm_key_sensors_process+0x2aa>
    1036:	cc 92       	st	X, r12
    1038:	77 c0       	rjmp	.+238    	; 0x1128 <qtm_key_sensors_process+0x398>
    103a:	81 50       	subi	r24, 0x01	; 1
    103c:	f8 01       	movw	r30, r16
    103e:	81 83       	std	Z+1, r24	; 0x01
    1040:	73 c0       	rjmp	.+230    	; 0x1128 <qtm_key_sensors_process+0x398>
    1042:	ee 81       	ldd	r30, Y+6	; 0x06
    1044:	ff 81       	ldd	r31, Y+7	; 0x07
    1046:	ea 0d       	add	r30, r10
    1048:	fb 1d       	adc	r31, r11
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	91 81       	ldd	r25, Z+1	; 0x01
    1052:	9f 5f       	subi	r25, 0xFF	; 255
    1054:	02 c0       	rjmp	.+4      	; 0x105a <qtm_key_sensors_process+0x2ca>
    1056:	55 95       	asr	r21
    1058:	47 95       	ror	r20
    105a:	9a 95       	dec	r25
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <qtm_key_sensors_process+0x2c6>
    105e:	26 1b       	sub	r18, r22
    1060:	37 0b       	sbc	r19, r23
    1062:	84 1b       	sub	r24, r20
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	82 17       	cp	r24, r18
    1068:	93 07       	cpc	r25, r19
    106a:	60 f4       	brcc	.+24     	; 0x1084 <qtm_key_sensors_process+0x2f4>
    106c:	d8 01       	movw	r26, r16
    106e:	6c 92       	st	X, r6
    1070:	ea 81       	ldd	r30, Y+2	; 0x02
    1072:	fb 81       	ldd	r31, Y+3	; 0x03
    1074:	23 81       	ldd	r18, Z+3	; 0x03
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	9d 81       	ldd	r25, Y+5	; 0x05
    107a:	fc 01       	movw	r30, r24
    107c:	ee 0d       	add	r30, r14
    107e:	ff 1d       	adc	r31, r15
    1080:	21 83       	std	Z+1, r18	; 0x01
    1082:	52 c0       	rjmp	.+164    	; 0x1128 <qtm_key_sensors_process+0x398>
    1084:	f8 01       	movw	r30, r16
    1086:	81 81       	ldd	r24, Z+1	; 0x01
    1088:	81 11       	cpse	r24, r1
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <qtm_key_sensors_process+0x300>
    108c:	c0 82       	st	Z, r12
    108e:	4c c0       	rjmp	.+152    	; 0x1128 <qtm_key_sensors_process+0x398>
    1090:	81 50       	subi	r24, 0x01	; 1
    1092:	81 83       	std	Z+1, r24	; 0x01
    1094:	22 24       	eor	r2, r2
    1096:	23 94       	inc	r2
    1098:	3b c0       	rjmp	.+118    	; 0x1110 <qtm_key_sensors_process+0x380>
    109a:	d8 01       	movw	r26, r16
    109c:	14 96       	adiw	r26, 0x04	; 4
    109e:	2d 91       	ld	r18, X+
    10a0:	3c 91       	ld	r19, X
    10a2:	15 97       	sbiw	r26, 0x05	; 5
    10a4:	12 96       	adiw	r26, 0x02	; 2
    10a6:	8d 91       	ld	r24, X+
    10a8:	9c 91       	ld	r25, X
    10aa:	13 97       	sbiw	r26, 0x03	; 3
    10ac:	dc 01       	movw	r26, r24
    10ae:	11 96       	adiw	r26, 0x01	; 1
    10b0:	8d 91       	ld	r24, X+
    10b2:	9c 91       	ld	r25, X
    10b4:	12 97       	sbiw	r26, 0x02	; 2
    10b6:	82 17       	cp	r24, r18
    10b8:	93 07       	cpc	r25, r19
    10ba:	68 f5       	brcc	.+90     	; 0x1116 <qtm_key_sensors_process+0x386>
    10bc:	28 1b       	sub	r18, r24
    10be:	39 0b       	sbc	r19, r25
    10c0:	ae 81       	ldd	r26, Y+6	; 0x06
    10c2:	bf 81       	ldd	r27, Y+7	; 0x07
    10c4:	aa 0d       	add	r26, r10
    10c6:	bb 1d       	adc	r27, r11
    10c8:	8c 91       	ld	r24, X
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	05 80       	ldd	r0, Z+5	; 0x05
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <qtm_key_sensors_process+0x344>
    10d0:	95 95       	asr	r25
    10d2:	87 95       	ror	r24
    10d4:	0a 94       	dec	r0
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <qtm_key_sensors_process+0x340>
    10d8:	99 27       	eor	r25, r25
    10da:	28 17       	cp	r18, r24
    10dc:	39 07       	cpc	r19, r25
    10de:	18 f4       	brcc	.+6      	; 0x10e6 <qtm_key_sensors_process+0x356>
    10e0:	f8 01       	movw	r30, r16
    10e2:	c0 82       	st	Z, r12
    10e4:	1a c0       	rjmp	.+52     	; 0x111a <qtm_key_sensors_process+0x38a>
    10e6:	d8 01       	movw	r26, r16
    10e8:	11 96       	adiw	r26, 0x01	; 1
    10ea:	8c 91       	ld	r24, X
    10ec:	11 97       	sbiw	r26, 0x01	; 1
    10ee:	81 11       	cpse	r24, r1
    10f0:	0c c0       	rjmp	.+24     	; 0x110a <qtm_key_sensors_process+0x37a>
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	8c 93       	st	X, r24
    10f6:	8c 81       	ldd	r24, Y+4	; 0x04
    10f8:	9d 81       	ldd	r25, Y+5	; 0x05
    10fa:	fc 01       	movw	r30, r24
    10fc:	ee 0d       	add	r30, r14
    10fe:	ff 1d       	adc	r31, r15
    1100:	02 80       	ldd	r0, Z+2	; 0x02
    1102:	f3 81       	ldd	r31, Z+3	; 0x03
    1104:	e0 2d       	mov	r30, r0
    1106:	c0 82       	st	Z, r12
    1108:	11 c0       	rjmp	.+34     	; 0x112c <qtm_key_sensors_process+0x39c>
    110a:	81 50       	subi	r24, 0x01	; 1
    110c:	f8 01       	movw	r30, r16
    110e:	81 83       	std	Z+1, r24	; 0x01
    1110:	dd 24       	eor	r13, r13
    1112:	d3 94       	inc	r13
    1114:	0b c0       	rjmp	.+22     	; 0x112c <qtm_key_sensors_process+0x39c>
    1116:	d8 01       	movw	r26, r16
    1118:	cc 92       	st	X, r12
    111a:	8c 81       	ldd	r24, Y+4	; 0x04
    111c:	9d 81       	ldd	r25, Y+5	; 0x05
    111e:	fc 01       	movw	r30, r24
    1120:	ee 0d       	add	r30, r14
    1122:	ff 1d       	adc	r31, r15
    1124:	11 82       	std	Z+1, r1	; 0x01
    1126:	02 c0       	rjmp	.+4      	; 0x112c <qtm_key_sensors_process+0x39c>
    1128:	22 24       	eor	r2, r2
    112a:	23 94       	inc	r2
    112c:	bf ef       	ldi	r27, 0xFF	; 255
    112e:	8b 1a       	sub	r8, r27
    1130:	9b 0a       	sbc	r9, r27
    1132:	e3 e0       	ldi	r30, 0x03	; 3
    1134:	ae 0e       	add	r10, r30
    1136:	b1 1c       	adc	r11, r1
    1138:	53 ce       	rjmp	.-858    	; 0xde0 <qtm_key_sensors_process+0x50>
    113a:	e8 81       	ld	r30, Y
    113c:	f9 81       	ldd	r31, Y+1	; 0x01
    113e:	80 81       	ld	r24, Z
    1140:	87 ff       	sbrs	r24, 7
    1142:	23 c0       	rjmp	.+70     	; 0x118a <qtm_key_sensors_process+0x3fa>
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	50 e0       	ldi	r21, 0x00	; 0
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	ea 81       	ldd	r30, Y+2	; 0x02
    114e:	fb 81       	ldd	r31, Y+3	; 0x03
    1150:	80 81       	ld	r24, Z
    1152:	91 81       	ldd	r25, Z+1	; 0x01
    1154:	28 17       	cp	r18, r24
    1156:	39 07       	cpc	r19, r25
    1158:	98 f4       	brcc	.+38     	; 0x1180 <qtm_key_sensors_process+0x3f0>
    115a:	ec 81       	ldd	r30, Y+4	; 0x04
    115c:	fd 81       	ldd	r31, Y+5	; 0x05
    115e:	e4 0f       	add	r30, r20
    1160:	f5 1f       	adc	r31, r21
    1162:	a2 81       	ldd	r26, Z+2	; 0x02
    1164:	b3 81       	ldd	r27, Z+3	; 0x03
    1166:	8c 91       	ld	r24, X
    1168:	80 fd       	sbrc	r24, 0
    116a:	05 c0       	rjmp	.+10     	; 0x1176 <qtm_key_sensors_process+0x3e6>
    116c:	90 81       	ld	r25, Z
    116e:	97 7f       	andi	r25, 0xF7	; 247
    1170:	11 f0       	breq	.+4      	; 0x1176 <qtm_key_sensors_process+0x3e6>
    1172:	81 60       	ori	r24, 0x01	; 1
    1174:	8c 93       	st	X, r24
    1176:	2f 5f       	subi	r18, 0xFF	; 255
    1178:	3f 4f       	sbci	r19, 0xFF	; 255
    117a:	4a 5f       	subi	r20, 0xFA	; 250
    117c:	5f 4f       	sbci	r21, 0xFF	; 255
    117e:	e6 cf       	rjmp	.-52     	; 0x114c <qtm_key_sensors_process+0x3bc>
    1180:	e8 81       	ld	r30, Y
    1182:	f9 81       	ldd	r31, Y+1	; 0x01
    1184:	80 81       	ld	r24, Z
    1186:	8f 77       	andi	r24, 0x7F	; 127
    1188:	80 83       	st	Z, r24
    118a:	d1 10       	cpse	r13, r1
    118c:	07 c0       	rjmp	.+14     	; 0x119c <qtm_key_sensors_process+0x40c>
    118e:	e8 81       	ld	r30, Y
    1190:	f9 81       	ldd	r31, Y+1	; 0x01
    1192:	21 10       	cpse	r2, r1
    1194:	6f c0       	rjmp	.+222    	; 0x1274 <qtm_key_sensors_process+0x4e4>
    1196:	80 81       	ld	r24, Z
    1198:	8e 7f       	andi	r24, 0xFE	; 254
    119a:	6e c0       	rjmp	.+220    	; 0x1278 <qtm_key_sensors_process+0x4e8>
    119c:	ea 81       	ldd	r30, Y+2	; 0x02
    119e:	fb 81       	ldd	r31, Y+3	; 0x03
    11a0:	81 85       	ldd	r24, Z+9	; 0x09
    11a2:	88 23       	and	r24, r24
    11a4:	a1 f3       	breq	.-24     	; 0x118e <qtm_key_sensors_process+0x3fe>
    11a6:	e8 81       	ld	r30, Y
    11a8:	f9 81       	ldd	r31, Y+1	; 0x01
    11aa:	80 81       	ld	r24, Z
    11ac:	80 68       	ori	r24, 0x80	; 128
    11ae:	80 83       	st	Z, r24
    11b0:	ea 81       	ldd	r30, Y+2	; 0x02
    11b2:	fb 81       	ldd	r31, Y+3	; 0x03
    11b4:	81 85       	ldd	r24, Z+9	; 0x09
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	51 f7       	brne	.-44     	; 0x118e <qtm_key_sensors_process+0x3fe>
    11ba:	40 e0       	ldi	r20, 0x00	; 0
    11bc:	50 e0       	ldi	r21, 0x00	; 0
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	96 e0       	ldi	r25, 0x06	; 6
    11c4:	d9 2e       	mov	r13, r25
    11c6:	ea 81       	ldd	r30, Y+2	; 0x02
    11c8:	fb 81       	ldd	r31, Y+3	; 0x03
    11ca:	60 81       	ld	r22, Z
    11cc:	71 81       	ldd	r23, Z+1	; 0x01
    11ce:	26 17       	cp	r18, r22
    11d0:	37 07       	cpc	r19, r23
    11d2:	e8 f6       	brcc	.-70     	; 0x118e <qtm_key_sensors_process+0x3fe>
    11d4:	0c 81       	ldd	r16, Y+4	; 0x04
    11d6:	1d 81       	ldd	r17, Y+5	; 0x05
    11d8:	fa 01       	movw	r30, r20
    11da:	ee 0f       	add	r30, r30
    11dc:	ff 1f       	adc	r31, r31
    11de:	e0 0f       	add	r30, r16
    11e0:	f1 1f       	adc	r31, r17
    11e2:	80 81       	ld	r24, Z
    11e4:	98 2f       	mov	r25, r24
    11e6:	97 7f       	andi	r25, 0xF7	; 247
    11e8:	a1 f1       	breq	.+104    	; 0x1252 <qtm_key_sensors_process+0x4c2>
    11ea:	85 38       	cpi	r24, 0x85	; 133
    11ec:	11 f0       	breq	.+4      	; 0x11f2 <qtm_key_sensors_process+0x462>
    11ee:	83 30       	cpi	r24, 0x03	; 3
    11f0:	b1 f5       	brne	.+108    	; 0x125e <qtm_key_sensors_process+0x4ce>
    11f2:	ee 80       	ldd	r14, Y+6	; 0x06
    11f4:	ff 80       	ldd	r15, Y+7	; 0x07
    11f6:	d7 01       	movw	r26, r14
    11f8:	a4 0f       	add	r26, r20
    11fa:	b5 1f       	adc	r27, r21
    11fc:	12 96       	adiw	r26, 0x02	; 2
    11fe:	bc 90       	ld	r11, X
    1200:	bb 20       	and	r11, r11
    1202:	39 f1       	breq	.+78     	; 0x1252 <qtm_key_sensors_process+0x4c2>
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	c1 2c       	mov	r12, r1
    120a:	86 17       	cp	r24, r22
    120c:	97 07       	cpc	r25, r23
    120e:	f8 f4       	brcc	.+62     	; 0x124e <qtm_key_sensors_process+0x4be>
    1210:	28 17       	cp	r18, r24
    1212:	39 07       	cpc	r19, r25
    1214:	d1 f0       	breq	.+52     	; 0x124a <qtm_key_sensors_process+0x4ba>
    1216:	d8 9e       	mul	r13, r24
    1218:	d0 01       	movw	r26, r0
    121a:	d9 9e       	mul	r13, r25
    121c:	b0 0d       	add	r27, r0
    121e:	11 24       	eor	r1, r1
    1220:	a0 0f       	add	r26, r16
    1222:	b1 1f       	adc	r27, r17
    1224:	ac 91       	ld	r26, X
    1226:	a4 30       	cpi	r26, 0x04	; 4
    1228:	11 f0       	breq	.+4      	; 0x122e <qtm_key_sensors_process+0x49e>
    122a:	a6 38       	cpi	r26, 0x86	; 134
    122c:	71 f4       	brne	.+28     	; 0x124a <qtm_key_sensors_process+0x4ba>
    122e:	dc 01       	movw	r26, r24
    1230:	aa 0f       	add	r26, r26
    1232:	bb 1f       	adc	r27, r27
    1234:	a8 0f       	add	r26, r24
    1236:	b9 1f       	adc	r27, r25
    1238:	ae 0d       	add	r26, r14
    123a:	bf 1d       	adc	r27, r15
    123c:	12 96       	adiw	r26, 0x02	; 2
    123e:	ac 91       	ld	r26, X
    1240:	ba 12       	cpse	r11, r26
    1242:	03 c0       	rjmp	.+6      	; 0x124a <qtm_key_sensors_process+0x4ba>
    1244:	cb 01       	movw	r24, r22
    1246:	cc 24       	eor	r12, r12
    1248:	c3 94       	inc	r12
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	de cf       	rjmp	.-68     	; 0x120a <qtm_key_sensors_process+0x47a>
    124e:	c1 10       	cpse	r12, r1
    1250:	06 c0       	rjmp	.+12     	; 0x125e <qtm_key_sensors_process+0x4ce>
    1252:	02 80       	ldd	r0, Z+2	; 0x02
    1254:	f3 81       	ldd	r31, Z+3	; 0x03
    1256:	e0 2d       	mov	r30, r0
    1258:	80 81       	ld	r24, Z
    125a:	8e 7f       	andi	r24, 0xFE	; 254
    125c:	05 c0       	rjmp	.+10     	; 0x1268 <qtm_key_sensors_process+0x4d8>
    125e:	02 80       	ldd	r0, Z+2	; 0x02
    1260:	f3 81       	ldd	r31, Z+3	; 0x03
    1262:	e0 2d       	mov	r30, r0
    1264:	80 81       	ld	r24, Z
    1266:	81 60       	ori	r24, 0x01	; 1
    1268:	80 83       	st	Z, r24
    126a:	2f 5f       	subi	r18, 0xFF	; 255
    126c:	3f 4f       	sbci	r19, 0xFF	; 255
    126e:	4d 5f       	subi	r20, 0xFD	; 253
    1270:	5f 4f       	sbci	r21, 0xFF	; 255
    1272:	a9 cf       	rjmp	.-174    	; 0x11c6 <qtm_key_sensors_process+0x436>
    1274:	80 81       	ld	r24, Z
    1276:	81 60       	ori	r24, 0x01	; 1
    1278:	80 83       	st	Z, r24
    127a:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <qtm_local_ms_timecount>
    127e:	90 91 38 38 	lds	r25, 0x3838	; 0x803838 <qtm_local_ms_timecount+0x1>
    1282:	e8 81       	ld	r30, Y
    1284:	f9 81       	ldd	r31, Y+1	; 0x01
    1286:	21 81       	ldd	r18, Z+1	; 0x01
    1288:	32 81       	ldd	r19, Z+2	; 0x02
    128a:	a9 01       	movw	r20, r18
    128c:	48 53       	subi	r20, 0x38	; 56
    128e:	5f 4f       	sbci	r21, 0xFF	; 255
    1290:	48 17       	cp	r20, r24
    1292:	59 07       	cpc	r21, r25
    1294:	38 f4       	brcc	.+14     	; 0x12a4 <qtm_key_sensors_process+0x514>
    1296:	82 1b       	sub	r24, r18
    1298:	93 0b       	sbc	r25, r19
    129a:	aa 24       	eor	r10, r10
    129c:	a3 94       	inc	r10
    129e:	a3 e0       	ldi	r26, 0x03	; 3
    12a0:	ba 2e       	mov	r11, r26
    12a2:	44 c0       	rjmp	.+136    	; 0x132c <qtm_key_sensors_process+0x59c>
    12a4:	82 17       	cp	r24, r18
    12a6:	93 07       	cpc	r25, r19
    12a8:	10 f0       	brcs	.+4      	; 0x12ae <qtm_key_sensors_process+0x51e>
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	04 c1       	rjmp	.+520    	; 0x14b6 <qtm_key_sensors_process+0x726>
    12ae:	82 1b       	sub	r24, r18
    12b0:	93 0b       	sbc	r25, r19
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	89 3c       	cpi	r24, 0xC9	; 201
    12b6:	91 05       	cpc	r25, r1
    12b8:	c0 f3       	brcs	.-16     	; 0x12aa <qtm_key_sensors_process+0x51a>
    12ba:	ef cf       	rjmp	.-34     	; 0x129a <qtm_key_sensors_process+0x50a>
    12bc:	88 5c       	subi	r24, 0xC8	; 200
    12be:	91 09       	sbc	r25, r1
    12c0:	e8 81       	ld	r30, Y
    12c2:	f9 81       	ldd	r31, Y+1	; 0x01
    12c4:	21 81       	ldd	r18, Z+1	; 0x01
    12c6:	32 81       	ldd	r19, Z+2	; 0x02
    12c8:	28 53       	subi	r18, 0x38	; 56
    12ca:	3f 4f       	sbci	r19, 0xFF	; 255
    12cc:	21 83       	std	Z+1, r18	; 0x01
    12ce:	32 83       	std	Z+2, r19	; 0x02
    12d0:	23 81       	ldd	r18, Z+3	; 0x03
    12d2:	21 11       	cpse	r18, r1
    12d4:	96 c0       	rjmp	.+300    	; 0x1402 <qtm_key_sensors_process+0x672>
    12d6:	24 81       	ldd	r18, Z+4	; 0x04
    12d8:	22 23       	and	r18, r18
    12da:	11 f0       	breq	.+4      	; 0x12e0 <qtm_key_sensors_process+0x550>
    12dc:	21 50       	subi	r18, 0x01	; 1
    12de:	24 83       	std	Z+4, r18	; 0x04
    12e0:	e8 81       	ld	r30, Y
    12e2:	f9 81       	ldd	r31, Y+1	; 0x01
    12e4:	25 81       	ldd	r18, Z+5	; 0x05
    12e6:	22 23       	and	r18, r18
    12e8:	11 f0       	breq	.+4      	; 0x12ee <qtm_key_sensors_process+0x55e>
    12ea:	21 50       	subi	r18, 0x01	; 1
    12ec:	25 83       	std	Z+5, r18	; 0x05
    12ee:	8a 80       	ldd	r8, Y+2	; 0x02
    12f0:	9b 80       	ldd	r9, Y+3	; 0x03
    12f2:	d4 01       	movw	r26, r8
    12f4:	16 96       	adiw	r26, 0x06	; 6
    12f6:	2c 91       	ld	r18, X
    12f8:	16 97       	sbiw	r26, 0x06	; 6
    12fa:	21 11       	cpse	r18, r1
    12fc:	1b c0       	rjmp	.+54     	; 0x1334 <qtm_key_sensors_process+0x5a4>
    12fe:	8a 80       	ldd	r8, Y+2	; 0x02
    1300:	9b 80       	ldd	r9, Y+3	; 0x03
    1302:	f4 01       	movw	r30, r8
    1304:	27 81       	ldd	r18, Z+7	; 0x07
    1306:	21 11       	cpse	r18, r1
    1308:	48 c0       	rjmp	.+144    	; 0x139a <qtm_key_sensors_process+0x60a>
    130a:	ea 81       	ldd	r30, Y+2	; 0x02
    130c:	fb 81       	ldd	r31, Y+3	; 0x03
    130e:	23 81       	ldd	r18, Z+3	; 0x03
    1310:	22 23       	and	r18, r18
    1312:	61 f0       	breq	.+24     	; 0x132c <qtm_key_sensors_process+0x59c>
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	a0 e0       	ldi	r26, 0x00	; 0
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	ea 81       	ldd	r30, Y+2	; 0x02
    131e:	fb 81       	ldd	r31, Y+3	; 0x03
    1320:	40 81       	ld	r20, Z
    1322:	51 81       	ldd	r21, Z+1	; 0x01
    1324:	a4 17       	cp	r26, r20
    1326:	b5 07       	cpc	r27, r21
    1328:	08 f4       	brcc	.+2      	; 0x132c <qtm_key_sensors_process+0x59c>
    132a:	6e c0       	rjmp	.+220    	; 0x1408 <qtm_key_sensors_process+0x678>
    132c:	89 3c       	cpi	r24, 0xC9	; 201
    132e:	91 05       	cpc	r25, r1
    1330:	28 f6       	brcc	.-118    	; 0x12bc <qtm_key_sensors_process+0x52c>
    1332:	bb cf       	rjmp	.-138    	; 0x12aa <qtm_key_sensors_process+0x51a>
    1334:	08 81       	ld	r16, Y
    1336:	19 81       	ldd	r17, Y+1	; 0x01
    1338:	f8 01       	movw	r30, r16
    133a:	24 81       	ldd	r18, Z+4	; 0x04
    133c:	21 11       	cpse	r18, r1
    133e:	df cf       	rjmp	.-66     	; 0x12fe <qtm_key_sensors_process+0x56e>
    1340:	ed 90       	ld	r14, X+
    1342:	fc 90       	ld	r15, X
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	4e 15       	cp	r20, r14
    134e:	5f 05       	cpc	r21, r15
    1350:	f1 f0       	breq	.+60     	; 0x138e <qtm_key_sensors_process+0x5fe>
    1352:	ec 81       	ldd	r30, Y+4	; 0x04
    1354:	fd 81       	ldd	r31, Y+5	; 0x05
    1356:	e6 0f       	add	r30, r22
    1358:	f7 1f       	adc	r31, r23
    135a:	20 81       	ld	r18, Z
    135c:	23 30       	cpi	r18, 0x03	; 3
    135e:	11 f0       	breq	.+4      	; 0x1364 <qtm_key_sensors_process+0x5d4>
    1360:	28 30       	cpi	r18, 0x08	; 8
    1362:	81 f4       	brne	.+32     	; 0x1384 <qtm_key_sensors_process+0x5f4>
    1364:	24 81       	ldd	r18, Z+4	; 0x04
    1366:	35 81       	ldd	r19, Z+5	; 0x05
    1368:	c2 80       	ldd	r12, Z+2	; 0x02
    136a:	d3 80       	ldd	r13, Z+3	; 0x03
    136c:	d6 01       	movw	r26, r12
    136e:	11 96       	adiw	r26, 0x01	; 1
    1370:	cd 90       	ld	r12, X+
    1372:	dc 90       	ld	r13, X
    1374:	12 97       	sbiw	r26, 0x02	; 2
    1376:	2c 15       	cp	r18, r12
    1378:	3d 05       	cpc	r19, r13
    137a:	20 f4       	brcc	.+8      	; 0x1384 <qtm_key_sensors_process+0x5f4>
    137c:	2f 5f       	subi	r18, 0xFF	; 255
    137e:	3f 4f       	sbci	r19, 0xFF	; 255
    1380:	24 83       	std	Z+4, r18	; 0x04
    1382:	35 83       	std	Z+5, r19	; 0x05
    1384:	4f 5f       	subi	r20, 0xFF	; 255
    1386:	5f 4f       	sbci	r21, 0xFF	; 255
    1388:	6a 5f       	subi	r22, 0xFA	; 250
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	df cf       	rjmp	.-66     	; 0x134c <qtm_key_sensors_process+0x5bc>
    138e:	f4 01       	movw	r30, r8
    1390:	26 81       	ldd	r18, Z+6	; 0x06
    1392:	d8 01       	movw	r26, r16
    1394:	14 96       	adiw	r26, 0x04	; 4
    1396:	2c 93       	st	X, r18
    1398:	b2 cf       	rjmp	.-156    	; 0x12fe <qtm_key_sensors_process+0x56e>
    139a:	08 81       	ld	r16, Y
    139c:	19 81       	ldd	r17, Y+1	; 0x01
    139e:	d8 01       	movw	r26, r16
    13a0:	15 96       	adiw	r26, 0x05	; 5
    13a2:	2c 91       	ld	r18, X
    13a4:	21 11       	cpse	r18, r1
    13a6:	b1 cf       	rjmp	.-158    	; 0x130a <qtm_key_sensors_process+0x57a>
    13a8:	e0 80       	ld	r14, Z
    13aa:	f1 80       	ldd	r15, Z+1	; 0x01
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	4e 15       	cp	r20, r14
    13b6:	5f 05       	cpc	r21, r15
    13b8:	f1 f0       	breq	.+60     	; 0x13f6 <qtm_key_sensors_process+0x666>
    13ba:	ec 81       	ldd	r30, Y+4	; 0x04
    13bc:	fd 81       	ldd	r31, Y+5	; 0x05
    13be:	e6 0f       	add	r30, r22
    13c0:	f7 1f       	adc	r31, r23
    13c2:	20 81       	ld	r18, Z
    13c4:	23 30       	cpi	r18, 0x03	; 3
    13c6:	11 f0       	breq	.+4      	; 0x13cc <qtm_key_sensors_process+0x63c>
    13c8:	28 30       	cpi	r18, 0x08	; 8
    13ca:	81 f4       	brne	.+32     	; 0x13ec <qtm_key_sensors_process+0x65c>
    13cc:	24 81       	ldd	r18, Z+4	; 0x04
    13ce:	35 81       	ldd	r19, Z+5	; 0x05
    13d0:	c2 80       	ldd	r12, Z+2	; 0x02
    13d2:	d3 80       	ldd	r13, Z+3	; 0x03
    13d4:	d6 01       	movw	r26, r12
    13d6:	11 96       	adiw	r26, 0x01	; 1
    13d8:	cd 90       	ld	r12, X+
    13da:	dc 90       	ld	r13, X
    13dc:	12 97       	sbiw	r26, 0x02	; 2
    13de:	c2 16       	cp	r12, r18
    13e0:	d3 06       	cpc	r13, r19
    13e2:	20 f4       	brcc	.+8      	; 0x13ec <qtm_key_sensors_process+0x65c>
    13e4:	21 50       	subi	r18, 0x01	; 1
    13e6:	31 09       	sbc	r19, r1
    13e8:	24 83       	std	Z+4, r18	; 0x04
    13ea:	35 83       	std	Z+5, r19	; 0x05
    13ec:	4f 5f       	subi	r20, 0xFF	; 255
    13ee:	5f 4f       	sbci	r21, 0xFF	; 255
    13f0:	6a 5f       	subi	r22, 0xFA	; 250
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255
    13f4:	df cf       	rjmp	.-66     	; 0x13b4 <qtm_key_sensors_process+0x624>
    13f6:	f4 01       	movw	r30, r8
    13f8:	27 81       	ldd	r18, Z+7	; 0x07
    13fa:	d8 01       	movw	r26, r16
    13fc:	15 96       	adiw	r26, 0x05	; 5
    13fe:	2c 93       	st	X, r18
    1400:	84 cf       	rjmp	.-248    	; 0x130a <qtm_key_sensors_process+0x57a>
    1402:	21 50       	subi	r18, 0x01	; 1
    1404:	23 83       	std	Z+3, r18	; 0x03
    1406:	81 cf       	rjmp	.-254    	; 0x130a <qtm_key_sensors_process+0x57a>
    1408:	a9 01       	movw	r20, r18
    140a:	44 0f       	add	r20, r20
    140c:	55 1f       	adc	r21, r21
    140e:	ec 81       	ldd	r30, Y+4	; 0x04
    1410:	fd 81       	ldd	r31, Y+5	; 0x05
    1412:	e4 0f       	add	r30, r20
    1414:	f5 1f       	adc	r31, r21
    1416:	60 81       	ld	r22, Z
    1418:	65 38       	cpi	r22, 0x85	; 133
    141a:	09 f0       	breq	.+2      	; 0x141e <qtm_key_sensors_process+0x68e>
    141c:	47 c0       	rjmp	.+142    	; 0x14ac <qtm_key_sensors_process+0x71c>
    141e:	61 81       	ldd	r22, Z+1	; 0x01
    1420:	66 23       	and	r22, r22
    1422:	19 f0       	breq	.+6      	; 0x142a <qtm_key_sensors_process+0x69a>
    1424:	61 50       	subi	r22, 0x01	; 1
    1426:	61 83       	std	Z+1, r22	; 0x01
    1428:	41 c0       	rjmp	.+130    	; 0x14ac <qtm_key_sensors_process+0x71c>
    142a:	a0 82       	st	Z, r10
    142c:	6c 81       	ldd	r22, Y+4	; 0x04
    142e:	7d 81       	ldd	r23, Y+5	; 0x05
    1430:	fb 01       	movw	r30, r22
    1432:	e4 0f       	add	r30, r20
    1434:	f5 1f       	adc	r31, r21
    1436:	02 80       	ldd	r0, Z+2	; 0x02
    1438:	f3 81       	ldd	r31, Z+3	; 0x03
    143a:	e0 2d       	mov	r30, r0
    143c:	b0 82       	st	Z, r11
    143e:	ee 81       	ldd	r30, Y+6	; 0x06
    1440:	ff 81       	ldd	r31, Y+7	; 0x07
    1442:	e2 0f       	add	r30, r18
    1444:	f3 1f       	adc	r31, r19
    1446:	d2 80       	ldd	r13, Z+2	; 0x02
    1448:	dd 20       	and	r13, r13
    144a:	81 f1       	breq	.+96     	; 0x14ac <qtm_key_sensors_process+0x71c>
    144c:	40 e0       	ldi	r20, 0x00	; 0
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	00 e0       	ldi	r16, 0x00	; 0
    1452:	10 e0       	ldi	r17, 0x00	; 0
    1454:	ea 81       	ldd	r30, Y+2	; 0x02
    1456:	fb 81       	ldd	r31, Y+3	; 0x03
    1458:	60 81       	ld	r22, Z
    145a:	71 81       	ldd	r23, Z+1	; 0x01
    145c:	06 17       	cp	r16, r22
    145e:	17 07       	cpc	r17, r23
    1460:	28 f5       	brcc	.+74     	; 0x14ac <qtm_key_sensors_process+0x71c>
    1462:	ee 81       	ldd	r30, Y+6	; 0x06
    1464:	ff 81       	ldd	r31, Y+7	; 0x07
    1466:	e4 0f       	add	r30, r20
    1468:	f5 1f       	adc	r31, r21
    146a:	62 81       	ldd	r22, Z+2	; 0x02
    146c:	d6 12       	cpse	r13, r22
    146e:	19 c0       	rjmp	.+50     	; 0x14a2 <qtm_key_sensors_process+0x712>
    1470:	ba 01       	movw	r22, r20
    1472:	66 0f       	add	r22, r22
    1474:	77 1f       	adc	r23, r23
    1476:	ec 81       	ldd	r30, Y+4	; 0x04
    1478:	fd 81       	ldd	r31, Y+5	; 0x05
    147a:	4f 01       	movw	r8, r30
    147c:	86 0e       	add	r8, r22
    147e:	97 1e       	adc	r9, r23
    1480:	f4 01       	movw	r30, r8
    1482:	e2 80       	ldd	r14, Z+2	; 0x02
    1484:	f3 80       	ldd	r15, Z+3	; 0x03
    1486:	f7 01       	movw	r30, r14
    1488:	f0 80       	ld	r15, Z
    148a:	f0 fe       	sbrs	r15, 0
    148c:	0a c0       	rjmp	.+20     	; 0x14a2 <qtm_key_sensors_process+0x712>
    148e:	f4 01       	movw	r30, r8
    1490:	a0 82       	st	Z, r10
    1492:	ec 81       	ldd	r30, Y+4	; 0x04
    1494:	fd 81       	ldd	r31, Y+5	; 0x05
    1496:	e6 0f       	add	r30, r22
    1498:	f7 1f       	adc	r31, r23
    149a:	02 80       	ldd	r0, Z+2	; 0x02
    149c:	f3 81       	ldd	r31, Z+3	; 0x03
    149e:	e0 2d       	mov	r30, r0
    14a0:	b0 82       	st	Z, r11
    14a2:	0f 5f       	subi	r16, 0xFF	; 255
    14a4:	1f 4f       	sbci	r17, 0xFF	; 255
    14a6:	4d 5f       	subi	r20, 0xFD	; 253
    14a8:	5f 4f       	sbci	r21, 0xFF	; 255
    14aa:	d4 cf       	rjmp	.-88     	; 0x1454 <qtm_key_sensors_process+0x6c4>
    14ac:	11 96       	adiw	r26, 0x01	; 1
    14ae:	2d 5f       	subi	r18, 0xFD	; 253
    14b0:	3f 4f       	sbci	r19, 0xFF	; 255
    14b2:	34 cf       	rjmp	.-408    	; 0x131c <qtm_key_sensors_process+0x58c>
    14b4:	8b e0       	ldi	r24, 0x0B	; 11
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	1f 91       	pop	r17
    14bc:	0f 91       	pop	r16
    14be:	ff 90       	pop	r15
    14c0:	ef 90       	pop	r14
    14c2:	df 90       	pop	r13
    14c4:	cf 90       	pop	r12
    14c6:	bf 90       	pop	r11
    14c8:	af 90       	pop	r10
    14ca:	9f 90       	pop	r9
    14cc:	8f 90       	pop	r8
    14ce:	7f 90       	pop	r7
    14d0:	6f 90       	pop	r6
    14d2:	5f 90       	pop	r5
    14d4:	4f 90       	pop	r4
    14d6:	3f 90       	pop	r3
    14d8:	2f 90       	pop	r2
    14da:	08 95       	ret

000014dc <select_next_channel_to_measure>:
    14dc:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <current_measure_channel>
    14e0:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <current_measure_channel+0x1>
    14e4:	a0 91 60 38 	lds	r26, 0x3860	; 0x803860 <qtm_acquisition_control_working_set_ptr>
    14e8:	b0 91 61 38 	lds	r27, 0x3861	; 0x803861 <qtm_acquisition_control_working_set_ptr+0x1>
    14ec:	ed 91       	ld	r30, X+
    14ee:	fc 91       	ld	r31, X
    14f0:	11 97       	sbiw	r26, 0x01	; 1
    14f2:	40 81       	ld	r20, Z
    14f4:	51 81       	ldd	r21, Z+1	; 0x01
    14f6:	25 e0       	ldi	r18, 0x05	; 5
    14f8:	28 9f       	mul	r18, r24
    14fa:	b0 01       	movw	r22, r0
    14fc:	29 9f       	mul	r18, r25
    14fe:	70 0d       	add	r23, r0
    1500:	11 24       	eor	r1, r1
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	84 17       	cp	r24, r20
    1508:	95 07       	cpc	r25, r21
    150a:	a8 f4       	brcc	.+42     	; 0x1536 <select_next_channel_to_measure+0x5a>
    150c:	14 96       	adiw	r26, 0x04	; 4
    150e:	ed 91       	ld	r30, X+
    1510:	fc 91       	ld	r31, X
    1512:	15 97       	sbiw	r26, 0x05	; 5
    1514:	e2 0f       	add	r30, r18
    1516:	f3 1f       	adc	r31, r19
    1518:	e6 0f       	add	r30, r22
    151a:	f7 1f       	adc	r31, r23
    151c:	e0 81       	ld	r30, Z
    151e:	2b 5f       	subi	r18, 0xFB	; 251
    1520:	3f 4f       	sbci	r19, 0xFF	; 255
    1522:	e0 fd       	sbrc	r30, 0
    1524:	02 c0       	rjmp	.+4      	; 0x152a <select_next_channel_to_measure+0x4e>
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	ee cf       	rjmp	.-36     	; 0x1506 <select_next_channel_to_measure+0x2a>
    152a:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <current_measure_channel>
    152e:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <current_measure_channel+0x1>
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	08 95       	ret
    1536:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <current_measure_channel>
    153a:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <current_measure_channel+0x1>
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	08 95       	ret

00001542 <qtm_measure_node>:
    1542:	bc 01       	movw	r22, r24
    1544:	e0 91 60 38 	lds	r30, 0x3860	; 0x803860 <qtm_acquisition_control_working_set_ptr>
    1548:	f0 91 61 38 	lds	r31, 0x3861	; 0x803861 <qtm_acquisition_control_working_set_ptr+0x1>
    154c:	9c 01       	movw	r18, r24
    154e:	83 e0       	ldi	r24, 0x03	; 3
    1550:	22 0f       	add	r18, r18
    1552:	33 1f       	adc	r19, r19
    1554:	8a 95       	dec	r24
    1556:	e1 f7       	brne	.-8      	; 0x1550 <qtm_measure_node+0xe>
    1558:	a2 81       	ldd	r26, Z+2	; 0x02
    155a:	b3 81       	ldd	r27, Z+3	; 0x03
    155c:	a2 0f       	add	r26, r18
    155e:	b3 1f       	adc	r27, r19
    1560:	12 96       	adiw	r26, 0x02	; 2
    1562:	9c 91       	ld	r25, X
    1564:	12 97       	sbiw	r26, 0x02	; 2
    1566:	13 96       	adiw	r26, 0x03	; 3
    1568:	8c 91       	ld	r24, X
    156a:	90 93 2a 06 	sts	0x062A, r25	; 0x80062a <gain_setting_int_cap+0x7f69f8>
    156e:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <gain_setting_int_cap+0x7f69f9>
    1572:	a2 81       	ldd	r26, Z+2	; 0x02
    1574:	b3 81       	ldd	r27, Z+3	; 0x03
    1576:	a2 0f       	add	r26, r18
    1578:	b3 1f       	adc	r27, r19
    157a:	9c 91       	ld	r25, X
    157c:	11 96       	adiw	r26, 0x01	; 1
    157e:	8c 91       	ld	r24, X
    1580:	90 93 26 06 	sts	0x0626, r25	; 0x800626 <gain_setting_int_cap+0x7f69f4>
    1584:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <gain_setting_int_cap+0x7f69f5>
    1588:	95 e0       	ldi	r25, 0x05	; 5
    158a:	96 9f       	mul	r25, r22
    158c:	a0 01       	movw	r20, r0
    158e:	97 9f       	mul	r25, r23
    1590:	50 0d       	add	r21, r0
    1592:	11 24       	eor	r1, r1
    1594:	a4 81       	ldd	r26, Z+4	; 0x04
    1596:	b5 81       	ldd	r27, Z+5	; 0x05
    1598:	a4 0f       	add	r26, r20
    159a:	b5 1f       	adc	r27, r21
    159c:	13 96       	adiw	r26, 0x03	; 3
    159e:	8c 91       	ld	r24, X
    15a0:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <gain_setting_int_cap+0x7f69e8>
    15a4:	a4 81       	ldd	r26, Z+4	; 0x04
    15a6:	b5 81       	ldd	r27, Z+5	; 0x05
    15a8:	a4 0f       	add	r26, r20
    15aa:	b5 1f       	adc	r27, r21
    15ac:	14 96       	adiw	r26, 0x04	; 4
    15ae:	8c 91       	ld	r24, X
    15b0:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <gain_setting_int_cap+0x7f69e9>
    15b4:	a4 81       	ldd	r26, Z+4	; 0x04
    15b6:	b5 81       	ldd	r27, Z+5	; 0x05
    15b8:	a4 0f       	add	r26, r20
    15ba:	b5 1f       	adc	r27, r21
    15bc:	8c 91       	ld	r24, X
    15be:	81 fd       	sbrc	r24, 1
    15c0:	9c 93       	st	X, r25
    15c2:	84 81       	ldd	r24, Z+4	; 0x04
    15c4:	95 81       	ldd	r25, Z+5	; 0x05
    15c6:	dc 01       	movw	r26, r24
    15c8:	a4 0f       	add	r26, r20
    15ca:	b5 1f       	adc	r27, r21
    15cc:	8c 91       	ld	r24, X
    15ce:	8c 71       	andi	r24, 0x1C	; 28
    15d0:	69 f4       	brne	.+26     	; 0x15ec <qtm_measure_node+0xaa>
    15d2:	a2 81       	ldd	r26, Z+2	; 0x02
    15d4:	b3 81       	ldd	r27, Z+3	; 0x03
    15d6:	a2 0f       	add	r26, r18
    15d8:	b3 1f       	adc	r27, r19
    15da:	16 96       	adiw	r26, 0x06	; 6
    15dc:	ac 91       	ld	r26, X
    15de:	a2 95       	swap	r26
    15e0:	af 70       	andi	r26, 0x0F	; 15
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	ae 5c       	subi	r26, 0xCE	; 206
    15e6:	b3 46       	sbci	r27, 0x63	; 99
    15e8:	8c 91       	ld	r24, X
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <qtm_measure_node+0xac>
    15ec:	8f e3       	ldi	r24, 0x3F	; 63
    15ee:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <gain_setting_int_cap+0x7f69ea>
    15f2:	a2 81       	ldd	r26, Z+2	; 0x02
    15f4:	b3 81       	ldd	r27, Z+3	; 0x03
    15f6:	a2 0f       	add	r26, r18
    15f8:	b3 1f       	adc	r27, r19
    15fa:	14 96       	adiw	r26, 0x04	; 4
    15fc:	8c 91       	ld	r24, X
    15fe:	8b 31       	cpi	r24, 0x1B	; 27
    1600:	10 f4       	brcc	.+4      	; 0x1606 <qtm_measure_node+0xc4>
    1602:	8c 5f       	subi	r24, 0xFC	; 252
    1604:	01 c0       	rjmp	.+2      	; 0x1608 <qtm_measure_node+0xc6>
    1606:	8f e1       	ldi	r24, 0x1F	; 31
    1608:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <gain_setting_int_cap+0x7f69d3>
    160c:	a2 81       	ldd	r26, Z+2	; 0x02
    160e:	b3 81       	ldd	r27, Z+3	; 0x03
    1610:	a2 0f       	add	r26, r18
    1612:	b3 1f       	adc	r27, r19
    1614:	17 96       	adiw	r26, 0x07	; 7
    1616:	8c 91       	ld	r24, X
    1618:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <gain_setting_int_cap+0x7f69cf>
    161c:	a2 81       	ldd	r26, Z+2	; 0x02
    161e:	b3 81       	ldd	r27, Z+3	; 0x03
    1620:	a2 0f       	add	r26, r18
    1622:	b3 1f       	adc	r27, r19
    1624:	15 96       	adiw	r26, 0x05	; 5
    1626:	8c 91       	ld	r24, X
    1628:	82 95       	swap	r24
    162a:	8f 70       	andi	r24, 0x0F	; 15
    162c:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <gain_setting_int_cap+0x7f69e7>
    1630:	82 81       	ldd	r24, Z+2	; 0x02
    1632:	93 81       	ldd	r25, Z+3	; 0x03
    1634:	fc 01       	movw	r30, r24
    1636:	e2 0f       	add	r30, r18
    1638:	f3 1f       	adc	r31, r19
    163a:	85 81       	ldd	r24, Z+5	; 0x05
    163c:	8f 70       	andi	r24, 0x0F	; 15
    163e:	80 61       	ori	r24, 0x10	; 16
    1640:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <gain_setting_int_cap+0x7f69d0>
    1644:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <gain_setting_int_cap+0x7f69e6>
    1648:	83 60       	ori	r24, 0x03	; 3
    164a:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <gain_setting_int_cap+0x7f69e6>
    164e:	81 e8       	ldi	r24, 0x81	; 129
    1650:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <gain_setting_int_cap+0x7f69ce>
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <gain_setting_int_cap+0x7f69d6>
    165a:	08 95       	ret

0000165c <qtm_acquisition_process>:
    165c:	3f 92       	push	r3
    165e:	4f 92       	push	r4
    1660:	5f 92       	push	r5
    1662:	6f 92       	push	r6
    1664:	7f 92       	push	r7
    1666:	8f 92       	push	r8
    1668:	9f 92       	push	r9
    166a:	af 92       	push	r10
    166c:	bf 92       	push	r11
    166e:	cf 92       	push	r12
    1670:	df 92       	push	r13
    1672:	ef 92       	push	r14
    1674:	ff 92       	push	r15
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <touch_seq_lib_state>
    1682:	88 23       	and	r24, r24
    1684:	09 f4       	brne	.+2      	; 0x1688 <qtm_acquisition_process+0x2c>
    1686:	48 c1       	rjmp	.+656    	; 0x1918 <qtm_acquisition_process+0x2bc>
    1688:	a0 91 60 38 	lds	r26, 0x3860	; 0x803860 <qtm_acquisition_control_working_set_ptr>
    168c:	b0 91 61 38 	lds	r27, 0x3861	; 0x803861 <qtm_acquisition_control_working_set_ptr+0x1>
    1690:	c0 90 62 38 	lds	r12, 0x3862	; 0x803862 <qtm_raw_data_measurements_ptr>
    1694:	d0 90 63 38 	lds	r13, 0x3863	; 0x803863 <qtm_raw_data_measurements_ptr+0x1>
    1698:	00 e0       	ldi	r16, 0x00	; 0
    169a:	10 e0       	ldi	r17, 0x00	; 0
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	70 e0       	ldi	r23, 0x00	; 0
    16a0:	e1 2c       	mov	r14, r1
    16a2:	f1 2c       	mov	r15, r1
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	33 24       	eor	r3, r3
    16a8:	33 94       	inc	r3
    16aa:	d1 e8       	ldi	r29, 0x81	; 129
    16ac:	4d 2e       	mov	r4, r29
    16ae:	88 24       	eor	r8, r8
    16b0:	8a 94       	dec	r8
    16b2:	99 24       	eor	r9, r9
    16b4:	93 94       	inc	r9
    16b6:	6d 90       	ld	r6, X+
    16b8:	7c 90       	ld	r7, X
    16ba:	11 97       	sbiw	r26, 0x01	; 1
    16bc:	f3 01       	movw	r30, r6
    16be:	20 81       	ld	r18, Z
    16c0:	31 81       	ldd	r19, Z+1	; 0x01
    16c2:	e2 16       	cp	r14, r18
    16c4:	f3 06       	cpc	r15, r19
    16c6:	08 f0       	brcs	.+2      	; 0x16ca <qtm_acquisition_process+0x6e>
    16c8:	23 c1       	rjmp	.+582    	; 0x1910 <qtm_acquisition_process+0x2b4>
    16ca:	e6 01       	movw	r28, r12
    16cc:	29 91       	ld	r18, Y+
    16ce:	39 91       	ld	r19, Y+
    16d0:	6e 01       	movw	r12, r28
    16d2:	14 96       	adiw	r26, 0x04	; 4
    16d4:	ed 91       	ld	r30, X+
    16d6:	fc 91       	ld	r31, X
    16d8:	15 97       	sbiw	r26, 0x05	; 5
    16da:	e6 0f       	add	r30, r22
    16dc:	f7 1f       	adc	r31, r23
    16de:	40 81       	ld	r20, Z
    16e0:	4c 71       	andi	r20, 0x1C	; 28
    16e2:	50 e0       	ldi	r21, 0x00	; 0
    16e4:	56 95       	lsr	r21
    16e6:	47 95       	ror	r20
    16e8:	56 95       	lsr	r21
    16ea:	47 95       	ror	r20
    16ec:	41 15       	cp	r20, r1
    16ee:	51 05       	cpc	r21, r1
    16f0:	21 f0       	breq	.+8      	; 0x16fa <qtm_acquisition_process+0x9e>
    16f2:	41 30       	cpi	r20, 0x01	; 1
    16f4:	51 05       	cpc	r21, r1
    16f6:	b9 f0       	breq	.+46     	; 0x1726 <qtm_acquisition_process+0xca>
    16f8:	02 c1       	rjmp	.+516    	; 0x18fe <qtm_acquisition_process+0x2a2>
    16fa:	12 96       	adiw	r26, 0x02	; 2
    16fc:	cd 91       	ld	r28, X+
    16fe:	dc 91       	ld	r29, X
    1700:	13 97       	sbiw	r26, 0x03	; 3
    1702:	c0 0f       	add	r28, r16
    1704:	d1 1f       	adc	r29, r17
    1706:	4e 81       	ldd	r20, Y+6	; 0x06
    1708:	4f 70       	andi	r20, 0x0F	; 15
    170a:	9f 81       	ldd	r25, Y+7	; 0x07
    170c:	49 17       	cp	r20, r25
    170e:	10 f4       	brcc	.+4      	; 0x1714 <qtm_acquisition_process+0xb8>
    1710:	94 1b       	sub	r25, r20
    1712:	01 c0       	rjmp	.+2      	; 0x1716 <qtm_acquisition_process+0xba>
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 c0       	rjmp	.+4      	; 0x171c <qtm_acquisition_process+0xc0>
    1718:	36 95       	lsr	r19
    171a:	27 95       	ror	r18
    171c:	9a 95       	dec	r25
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <qtm_acquisition_process+0xbc>
    1720:	21 83       	std	Z+1, r18	; 0x01
    1722:	32 83       	std	Z+2, r19	; 0x02
    1724:	ed c0       	rjmp	.+474    	; 0x1900 <qtm_acquisition_process+0x2a4>
    1726:	12 96       	adiw	r26, 0x02	; 2
    1728:	4d 91       	ld	r20, X+
    172a:	5c 91       	ld	r21, X
    172c:	13 97       	sbiw	r26, 0x03	; 3
    172e:	40 0f       	add	r20, r16
    1730:	51 1f       	adc	r21, r17
    1732:	ea 01       	movw	r28, r20
    1734:	0f 80       	ldd	r0, Y+7	; 0x07
    1736:	02 c0       	rjmp	.+4      	; 0x173c <qtm_acquisition_process+0xe0>
    1738:	36 95       	lsr	r19
    173a:	27 95       	ror	r18
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <qtm_acquisition_process+0xdc>
    1740:	21 83       	std	Z+1, r18	; 0x01
    1742:	32 83       	std	Z+2, r19	; 0x02
    1744:	a3 80       	ldd	r10, Z+3	; 0x03
    1746:	b4 80       	ldd	r11, Z+4	; 0x04
    1748:	21 15       	cp	r18, r1
    174a:	d2 e0       	ldi	r29, 0x02	; 2
    174c:	3d 07       	cpc	r19, r29
    174e:	20 f0       	brcs	.+8      	; 0x1758 <qtm_acquisition_process+0xfc>
    1750:	2f 5f       	subi	r18, 0xFF	; 255
    1752:	31 40       	sbci	r19, 0x01	; 1
    1754:	91 e0       	ldi	r25, 0x01	; 1
    1756:	05 c0       	rjmp	.+10     	; 0x1762 <qtm_acquisition_process+0x106>
    1758:	a4 01       	movw	r20, r8
    175a:	42 1b       	sub	r20, r18
    175c:	53 0b       	sbc	r21, r19
    175e:	9a 01       	movw	r18, r20
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	e3 01       	movw	r28, r6
    1764:	5a 80       	ldd	r5, Y+2	; 0x02
    1766:	d0 e4       	ldi	r29, 0x40	; 64
    1768:	5d 12       	cpse	r5, r29
    176a:	05 c0       	rjmp	.+10     	; 0x1776 <qtm_acquisition_process+0x11a>
    176c:	36 95       	lsr	r19
    176e:	27 95       	ror	r18
    1770:	99 23       	and	r25, r25
    1772:	19 f0       	breq	.+6      	; 0x177a <qtm_acquisition_process+0x11e>
    1774:	09 c0       	rjmp	.+18     	; 0x1788 <qtm_acquisition_process+0x12c>
    1776:	99 23       	and	r25, r25
    1778:	39 f0       	breq	.+14     	; 0x1788 <qtm_acquisition_process+0x12c>
    177a:	4f ef       	ldi	r20, 0xFF	; 255
    177c:	a4 16       	cp	r10, r20
    177e:	b4 06       	cpc	r11, r20
    1780:	31 f4       	brne	.+12     	; 0x178e <qtm_acquisition_process+0x132>
    1782:	40 82       	st	Z, r4
    1784:	8e e0       	ldi	r24, 0x0E	; 14
    1786:	07 c0       	rjmp	.+14     	; 0x1796 <qtm_acquisition_process+0x13a>
    1788:	77 24       	eor	r7, r7
    178a:	73 94       	inc	r7
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <qtm_acquisition_process+0x134>
    178e:	71 2c       	mov	r7, r1
    1790:	2a 30       	cpi	r18, 0x0A	; 10
    1792:	31 05       	cpc	r19, r1
    1794:	90 f4       	brcc	.+36     	; 0x17ba <qtm_acquisition_process+0x15e>
    1796:	14 96       	adiw	r26, 0x04	; 4
    1798:	ed 91       	ld	r30, X+
    179a:	fc 91       	ld	r31, X
    179c:	15 97       	sbiw	r26, 0x05	; 5
    179e:	e6 0f       	add	r30, r22
    17a0:	f7 1f       	adc	r31, r23
    17a2:	90 81       	ld	r25, Z
    17a4:	97 ff       	sbrs	r25, 7
    17a6:	30 82       	st	Z, r3
    17a8:	14 96       	adiw	r26, 0x04	; 4
    17aa:	ed 91       	ld	r30, X+
    17ac:	fc 91       	ld	r31, X
    17ae:	15 97       	sbiw	r26, 0x05	; 5
    17b0:	e6 0f       	add	r30, r22
    17b2:	f7 1f       	adc	r31, r23
    17b4:	a3 82       	std	Z+3, r10	; 0x03
    17b6:	b4 82       	std	Z+4, r11	; 0x04
    17b8:	a3 c0       	rjmp	.+326    	; 0x1900 <qtm_acquisition_process+0x2a4>
    17ba:	e5 01       	movw	r28, r10
    17bc:	cd 2f       	mov	r28, r29
    17be:	dd 27       	eor	r29, r29
    17c0:	c2 95       	swap	r28
    17c2:	cf 70       	andi	r28, 0x0F	; 15
    17c4:	9c 2f       	mov	r25, r28
    17c6:	a5 01       	movw	r20, r10
    17c8:	44 27       	eor	r20, r20
    17ca:	5f 70       	andi	r21, 0x0F	; 15
    17cc:	65 2e       	mov	r6, r21
    17ce:	a5 01       	movw	r20, r10
    17d0:	40 7f       	andi	r20, 0xF0	; 240
    17d2:	55 27       	eor	r21, r21
    17d4:	52 95       	swap	r21
    17d6:	42 95       	swap	r20
    17d8:	4f 70       	andi	r20, 0x0F	; 15
    17da:	45 27       	eor	r20, r21
    17dc:	5f 70       	andi	r21, 0x0F	; 15
    17de:	45 27       	eor	r20, r21
    17e0:	5a 2d       	mov	r21, r10
    17e2:	5f 70       	andi	r21, 0x0F	; 15
    17e4:	a5 2e       	mov	r10, r21
    17e6:	c4 30       	cpi	r28, 0x04	; 4
    17e8:	30 f0       	brcs	.+12     	; 0x17f6 <qtm_acquisition_process+0x19a>
    17ea:	93 70       	andi	r25, 0x03	; 3
    17ec:	d6 95       	lsr	r29
    17ee:	c7 95       	ror	r28
    17f0:	d6 95       	lsr	r29
    17f2:	c7 95       	ror	r28
    17f4:	9c 0f       	add	r25, r28
    17f6:	71 10       	cpse	r7, r1
    17f8:	3c c0       	rjmp	.+120    	; 0x1872 <qtm_acquisition_process+0x216>
    17fa:	50 e8       	ldi	r21, 0x80	; 128
    17fc:	55 0d       	add	r21, r5
    17fe:	52 30       	cpi	r21, 0x02	; 2
    1800:	10 f4       	brcc	.+4      	; 0x1806 <qtm_acquisition_process+0x1aa>
    1802:	56 e0       	ldi	r21, 0x06	; 6
    1804:	07 c0       	rjmp	.+14     	; 0x1814 <qtm_acquisition_process+0x1b8>
    1806:	53 e0       	ldi	r21, 0x03	; 3
    1808:	05 c0       	rjmp	.+10     	; 0x1814 <qtm_acquisition_process+0x1b8>
    180a:	95 17       	cp	r25, r21
    180c:	68 f4       	brcc	.+26     	; 0x1828 <qtm_acquisition_process+0x1cc>
    180e:	9f 5f       	subi	r25, 0xFF	; 255
    1810:	2f 5c       	subi	r18, 0xCF	; 207
    1812:	31 09       	sbc	r19, r1
    1814:	20 3d       	cpi	r18, 0xD0	; 208
    1816:	31 05       	cpc	r19, r1
    1818:	c0 f7       	brcc	.-16     	; 0x180a <qtm_acquisition_process+0x1ae>
    181a:	06 c0       	rjmp	.+12     	; 0x1828 <qtm_acquisition_process+0x1cc>
    181c:	cf e0       	ldi	r28, 0x0F	; 15
    181e:	6c 16       	cp	r6, r28
    1820:	49 f0       	breq	.+18     	; 0x1834 <qtm_acquisition_process+0x1d8>
    1822:	63 94       	inc	r6
    1824:	25 51       	subi	r18, 0x15	; 21
    1826:	31 09       	sbc	r19, r1
    1828:	26 31       	cpi	r18, 0x16	; 22
    182a:	31 05       	cpc	r19, r1
    182c:	b8 f7       	brcc	.-18     	; 0x181c <qtm_acquisition_process+0x1c0>
    182e:	df e0       	ldi	r29, 0x0F	; 15
    1830:	6d 12       	cpse	r6, r29
    1832:	0e c0       	rjmp	.+28     	; 0x1850 <qtm_acquisition_process+0x1f4>
    1834:	95 17       	cp	r25, r21
    1836:	20 f4       	brcc	.+8      	; 0x1840 <qtm_acquisition_process+0x1e4>
    1838:	9f 5f       	subi	r25, 0xFF	; 255
    183a:	d5 e0       	ldi	r29, 0x05	; 5
    183c:	6d 2e       	mov	r6, r29
    183e:	08 c0       	rjmp	.+16     	; 0x1850 <qtm_acquisition_process+0x1f4>
    1840:	cf e0       	ldi	r28, 0x0F	; 15
    1842:	6c 2e       	mov	r6, r28
    1844:	05 c0       	rjmp	.+10     	; 0x1850 <qtm_acquisition_process+0x1f4>
    1846:	4f 30       	cpi	r20, 0x0F	; 15
    1848:	49 f0       	breq	.+18     	; 0x185c <qtm_acquisition_process+0x200>
    184a:	4f 5f       	subi	r20, 0xFF	; 255
    184c:	22 50       	subi	r18, 0x02	; 2
    184e:	31 09       	sbc	r19, r1
    1850:	23 30       	cpi	r18, 0x03	; 3
    1852:	31 05       	cpc	r19, r1
    1854:	c0 f7       	brcc	.-16     	; 0x1846 <qtm_acquisition_process+0x1ea>
    1856:	4f 30       	cpi	r20, 0x0F	; 15
    1858:	09 f0       	breq	.+2      	; 0x185c <qtm_acquisition_process+0x200>
    185a:	65 c0       	rjmp	.+202    	; 0x1926 <qtm_acquisition_process+0x2ca>
    185c:	4f e0       	ldi	r20, 0x0F	; 15
    185e:	64 16       	cp	r6, r20
    1860:	81 f1       	breq	.+96     	; 0x18c2 <qtm_acquisition_process+0x266>
    1862:	63 94       	inc	r6
    1864:	45 e0       	ldi	r20, 0x05	; 5
    1866:	5f c0       	rjmp	.+190    	; 0x1926 <qtm_acquisition_process+0x2ca>
    1868:	99 23       	and	r25, r25
    186a:	61 f0       	breq	.+24     	; 0x1884 <qtm_acquisition_process+0x228>
    186c:	91 50       	subi	r25, 0x01	; 1
    186e:	2f 5c       	subi	r18, 0xCF	; 207
    1870:	31 09       	sbc	r19, r1
    1872:	20 3d       	cpi	r18, 0xD0	; 208
    1874:	31 05       	cpc	r19, r1
    1876:	c0 f7       	brcc	.-16     	; 0x1868 <qtm_acquisition_process+0x20c>
    1878:	05 c0       	rjmp	.+10     	; 0x1884 <qtm_acquisition_process+0x228>
    187a:	66 20       	and	r6, r6
    187c:	41 f0       	breq	.+16     	; 0x188e <qtm_acquisition_process+0x232>
    187e:	6a 94       	dec	r6
    1880:	25 51       	subi	r18, 0x15	; 21
    1882:	31 09       	sbc	r19, r1
    1884:	26 31       	cpi	r18, 0x16	; 22
    1886:	31 05       	cpc	r19, r1
    1888:	c0 f7       	brcc	.-16     	; 0x187a <qtm_acquisition_process+0x21e>
    188a:	61 10       	cpse	r6, r1
    188c:	0d c0       	rjmp	.+26     	; 0x18a8 <qtm_acquisition_process+0x24c>
    188e:	99 23       	and	r25, r25
    1890:	21 f0       	breq	.+8      	; 0x189a <qtm_acquisition_process+0x23e>
    1892:	91 50       	subi	r25, 0x01	; 1
    1894:	5a e0       	ldi	r21, 0x0A	; 10
    1896:	65 2e       	mov	r6, r21
    1898:	07 c0       	rjmp	.+14     	; 0x18a8 <qtm_acquisition_process+0x24c>
    189a:	61 2c       	mov	r6, r1
    189c:	05 c0       	rjmp	.+10     	; 0x18a8 <qtm_acquisition_process+0x24c>
    189e:	44 23       	and	r20, r20
    18a0:	41 f0       	breq	.+16     	; 0x18b2 <qtm_acquisition_process+0x256>
    18a2:	41 50       	subi	r20, 0x01	; 1
    18a4:	22 50       	subi	r18, 0x02	; 2
    18a6:	31 09       	sbc	r19, r1
    18a8:	23 30       	cpi	r18, 0x03	; 3
    18aa:	31 05       	cpc	r19, r1
    18ac:	c0 f7       	brcc	.-16     	; 0x189e <qtm_acquisition_process+0x242>
    18ae:	41 11       	cpse	r20, r1
    18b0:	10 c0       	rjmp	.+32     	; 0x18d2 <qtm_acquisition_process+0x276>
    18b2:	66 20       	and	r6, r6
    18b4:	e9 f1       	breq	.+122    	; 0x1930 <qtm_acquisition_process+0x2d4>
    18b6:	6a 94       	dec	r6
    18b8:	4a e0       	ldi	r20, 0x0A	; 10
    18ba:	23 30       	cpi	r18, 0x03	; 3
    18bc:	31 05       	cpc	r19, r1
    18be:	c8 f6       	brcc	.-78     	; 0x1872 <qtm_acquisition_process+0x216>
    18c0:	08 c0       	rjmp	.+16     	; 0x18d2 <qtm_acquisition_process+0x276>
    18c2:	59 13       	cpse	r21, r25
    18c4:	2f c0       	rjmp	.+94     	; 0x1924 <qtm_acquisition_process+0x2c8>
    18c6:	23 30       	cpi	r18, 0x03	; 3
    18c8:	31 05       	cpc	r19, r1
    18ca:	40 f1       	brcs	.+80     	; 0x191c <qtm_acquisition_process+0x2c0>
    18cc:	4f e0       	ldi	r20, 0x0F	; 15
    18ce:	a4 2e       	mov	r10, r20
    18d0:	4f e0       	ldi	r20, 0x0F	; 15
    18d2:	94 30       	cpi	r25, 0x04	; 4
    18d4:	18 f0       	brcs	.+6      	; 0x18dc <qtm_acquisition_process+0x280>
    18d6:	99 0f       	add	r25, r25
    18d8:	99 0f       	add	r25, r25
    18da:	99 50       	subi	r25, 0x09	; 9
    18dc:	c0 e1       	ldi	r28, 0x10	; 16
    18de:	4c 9f       	mul	r20, r28
    18e0:	a0 01       	movw	r20, r0
    18e2:	11 24       	eor	r1, r1
    18e4:	56 29       	or	r21, r6
    18e6:	4a 29       	or	r20, r10
    18e8:	c9 2f       	mov	r28, r25
    18ea:	d0 e0       	ldi	r29, 0x00	; 0
    18ec:	dc 2f       	mov	r29, r28
    18ee:	cc 27       	eor	r28, r28
    18f0:	d2 95       	swap	r29
    18f2:	d0 7f       	andi	r29, 0xF0	; 240
    18f4:	4c 2b       	or	r20, r28
    18f6:	5d 2b       	or	r21, r29
    18f8:	43 83       	std	Z+3, r20	; 0x03
    18fa:	54 83       	std	Z+4, r21	; 0x04
    18fc:	01 c0       	rjmp	.+2      	; 0x1900 <qtm_acquisition_process+0x2a4>
    18fe:	ff cf       	rjmp	.-2      	; 0x18fe <qtm_acquisition_process+0x2a2>
    1900:	df ef       	ldi	r29, 0xFF	; 255
    1902:	ed 1a       	sub	r14, r29
    1904:	fd 0a       	sbc	r15, r29
    1906:	6b 5f       	subi	r22, 0xFB	; 251
    1908:	7f 4f       	sbci	r23, 0xFF	; 255
    190a:	08 5f       	subi	r16, 0xF8	; 248
    190c:	1f 4f       	sbci	r17, 0xFF	; 255
    190e:	d3 ce       	rjmp	.-602    	; 0x16b6 <qtm_acquisition_process+0x5a>
    1910:	92 e0       	ldi	r25, 0x02	; 2
    1912:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <touch_seq_lib_state>
    1916:	0e c0       	rjmp	.+28     	; 0x1934 <qtm_acquisition_process+0x2d8>
    1918:	83 e0       	ldi	r24, 0x03	; 3
    191a:	0c c0       	rjmp	.+24     	; 0x1934 <qtm_acquisition_process+0x2d8>
    191c:	4f e0       	ldi	r20, 0x0F	; 15
    191e:	2f e0       	ldi	r18, 0x0F	; 15
    1920:	a2 2e       	mov	r10, r18
    1922:	d7 cf       	rjmp	.-82     	; 0x18d2 <qtm_acquisition_process+0x276>
    1924:	4f e0       	ldi	r20, 0x0F	; 15
    1926:	23 30       	cpi	r18, 0x03	; 3
    1928:	31 05       	cpc	r19, r1
    192a:	08 f0       	brcs	.+2      	; 0x192e <qtm_acquisition_process+0x2d2>
    192c:	73 cf       	rjmp	.-282    	; 0x1814 <qtm_acquisition_process+0x1b8>
    192e:	d1 cf       	rjmp	.-94     	; 0x18d2 <qtm_acquisition_process+0x276>
    1930:	40 e0       	ldi	r20, 0x00	; 0
    1932:	cf cf       	rjmp	.-98     	; 0x18d2 <qtm_acquisition_process+0x276>
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	1f 91       	pop	r17
    193a:	0f 91       	pop	r16
    193c:	ff 90       	pop	r15
    193e:	ef 90       	pop	r14
    1940:	df 90       	pop	r13
    1942:	cf 90       	pop	r12
    1944:	bf 90       	pop	r11
    1946:	af 90       	pop	r10
    1948:	9f 90       	pop	r9
    194a:	8f 90       	pop	r8
    194c:	7f 90       	pop	r7
    194e:	6f 90       	pop	r6
    1950:	5f 90       	pop	r5
    1952:	4f 90       	pop	r4
    1954:	3f 90       	pop	r3
    1956:	08 95       	ret

00001958 <qtm_ptc_init_acquisition_module>:
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	e1 f1       	breq	.+120    	; 0x19d8 <qtm_ptc_init_acquisition_module+0x80>
    1960:	dc 01       	movw	r26, r24
    1962:	ed 91       	ld	r30, X+
    1964:	fc 91       	ld	r31, X
    1966:	a0 81       	ld	r26, Z
    1968:	b1 81       	ldd	r27, Z+1	; 0x01
    196a:	60 e0       	ldi	r22, 0x00	; 0
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	4a 17       	cp	r20, r26
    1978:	5b 07       	cpc	r21, r27
    197a:	99 f0       	breq	.+38     	; 0x19a2 <qtm_ptc_init_acquisition_module+0x4a>
    197c:	ec 01       	movw	r28, r24
    197e:	ea 81       	ldd	r30, Y+2	; 0x02
    1980:	fb 81       	ldd	r31, Y+3	; 0x03
    1982:	e6 0f       	add	r30, r22
    1984:	f7 1f       	adc	r31, r23
    1986:	c0 81       	ld	r28, Z
    1988:	d1 81       	ldd	r29, Z+1	; 0x01
    198a:	02 80       	ldd	r0, Z+2	; 0x02
    198c:	f3 81       	ldd	r31, Z+3	; 0x03
    198e:	e0 2d       	mov	r30, r0
    1990:	ec 2b       	or	r30, r28
    1992:	fd 2b       	or	r31, r29
    1994:	2e 2b       	or	r18, r30
    1996:	3f 2b       	or	r19, r31
    1998:	4f 5f       	subi	r20, 0xFF	; 255
    199a:	5f 4f       	sbci	r21, 0xFF	; 255
    199c:	68 5f       	subi	r22, 0xF8	; 248
    199e:	7f 4f       	sbci	r23, 0xFF	; 255
    19a0:	ea cf       	rjmp	.-44     	; 0x1976 <qtm_ptc_init_acquisition_module+0x1e>
    19a2:	21 15       	cp	r18, r1
    19a4:	31 05       	cpc	r19, r1
    19a6:	d1 f0       	breq	.+52     	; 0x19dc <qtm_ptc_init_acquisition_module+0x84>
    19a8:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <touch_seq_lib_state>
    19ac:	81 11       	cpse	r24, r1
    19ae:	08 c0       	rjmp	.+16     	; 0x19c0 <qtm_ptc_init_acquisition_module+0x68>
    19b0:	20 93 22 06 	sts	0x0622, r18	; 0x800622 <gain_setting_int_cap+0x7f69f0>
    19b4:	30 93 23 06 	sts	0x0623, r19	; 0x800623 <gain_setting_int_cap+0x7f69f1>
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <touch_seq_lib_state>
    19be:	0a c0       	rjmp	.+20     	; 0x19d4 <qtm_ptc_init_acquisition_module+0x7c>
    19c0:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <gain_setting_int_cap+0x7f69f0>
    19c4:	82 2b       	or	r24, r18
    19c6:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <gain_setting_int_cap+0x7f69f0>
    19ca:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <gain_setting_int_cap+0x7f69f1>
    19ce:	83 2b       	or	r24, r19
    19d0:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <gain_setting_int_cap+0x7f69f1>
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	03 c0       	rjmp	.+6      	; 0x19de <qtm_ptc_init_acquisition_module+0x86>
    19d8:	8b e0       	ldi	r24, 0x0B	; 11
    19da:	01 c0       	rjmp	.+2      	; 0x19de <qtm_ptc_init_acquisition_module+0x86>
    19dc:	82 e0       	ldi	r24, 0x02	; 2
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	08 95       	ret

000019e4 <qtm_ptc_qtlib_assign_signal_memory>:
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	31 f0       	breq	.+12     	; 0x19f4 <qtm_ptc_qtlib_assign_signal_memory+0x10>
    19e8:	80 93 62 38 	sts	0x3862, r24	; 0x803862 <qtm_raw_data_measurements_ptr>
    19ec:	90 93 63 38 	sts	0x3863, r25	; 0x803863 <qtm_raw_data_measurements_ptr+0x1>
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	08 95       	ret
    19f4:	8b e0       	ldi	r24, 0x0B	; 11
    19f6:	08 95       	ret

000019f8 <qtm_ptc_start_measurement_seq>:
    19f8:	61 15       	cp	r22, r1
    19fa:	71 05       	cpc	r23, r1
    19fc:	a1 f1       	breq	.+104    	; 0x1a66 <qtm_ptc_start_measurement_seq+0x6e>
    19fe:	00 97       	sbiw	r24, 0x00	; 0
    1a00:	91 f1       	breq	.+100    	; 0x1a66 <qtm_ptc_start_measurement_seq+0x6e>
    1a02:	20 91 3b 38 	lds	r18, 0x383B	; 0x80383b <touch_seq_lib_state>
    1a06:	22 23       	and	r18, r18
    1a08:	81 f1       	breq	.+96     	; 0x1a6a <qtm_ptc_start_measurement_seq+0x72>
    1a0a:	24 30       	cpi	r18, 0x04	; 4
    1a0c:	81 f1       	breq	.+96     	; 0x1a6e <qtm_ptc_start_measurement_seq+0x76>
    1a0e:	80 93 60 38 	sts	0x3860, r24	; 0x803860 <qtm_acquisition_control_working_set_ptr>
    1a12:	90 93 61 38 	sts	0x3861, r25	; 0x803861 <qtm_acquisition_control_working_set_ptr+0x1>
    1a16:	60 93 39 38 	sts	0x3839, r22	; 0x803839 <ptc_seq_measure_complete_pointer>
    1a1a:	70 93 3a 38 	sts	0x383A, r23	; 0x80383a <ptc_seq_measure_complete_pointer+0x1>
    1a1e:	10 92 18 06 	sts	0x0618, r1	; 0x800618 <gain_setting_int_cap+0x7f69e6>
    1a22:	dc 01       	movw	r26, r24
    1a24:	ed 91       	ld	r30, X+
    1a26:	fc 91       	ld	r31, X
    1a28:	22 81       	ldd	r18, Z+2	; 0x02
    1a2a:	20 34       	cpi	r18, 0x40	; 64
    1a2c:	39 f4       	brne	.+14     	; 0x1a3c <qtm_ptc_start_measurement_seq+0x44>
    1a2e:	20 ec       	ldi	r18, 0xC0	; 192
    1a30:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <gain_setting_int_cap+0x7f69e6>
    1a34:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <gain_setting_int_cap+0x7f69e6>
    1a38:	20 62       	ori	r18, 0x20	; 32
    1a3a:	05 c0       	rjmp	.+10     	; 0x1a46 <qtm_ptc_start_measurement_seq+0x4e>
    1a3c:	20 38       	cpi	r18, 0x80	; 128
    1a3e:	41 f4       	brne	.+16     	; 0x1a50 <qtm_ptc_start_measurement_seq+0x58>
    1a40:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <gain_setting_int_cap+0x7f69e6>
    1a44:	28 62       	ori	r18, 0x28	; 40
    1a46:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <gain_setting_int_cap+0x7f69e6>
    1a4a:	10 92 1e 06 	sts	0x061E, r1	; 0x80061e <gain_setting_int_cap+0x7f69ec>
    1a4e:	13 c0       	rjmp	.+38     	; 0x1a76 <qtm_ptc_start_measurement_seq+0x7e>
    1a50:	21 38       	cpi	r18, 0x81	; 129
    1a52:	79 f4       	brne	.+30     	; 0x1a72 <qtm_ptc_start_measurement_seq+0x7a>
    1a54:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <gain_setting_int_cap+0x7f69e6>
    1a58:	28 62       	ori	r18, 0x28	; 40
    1a5a:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <gain_setting_int_cap+0x7f69e6>
    1a5e:	26 e8       	ldi	r18, 0x86	; 134
    1a60:	20 93 1e 06 	sts	0x061E, r18	; 0x80061e <gain_setting_int_cap+0x7f69ec>
    1a64:	08 c0       	rjmp	.+16     	; 0x1a76 <qtm_ptc_start_measurement_seq+0x7e>
    1a66:	8b e0       	ldi	r24, 0x0B	; 11
    1a68:	08 95       	ret
    1a6a:	83 e0       	ldi	r24, 0x03	; 3
    1a6c:	08 95       	ret
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	08 95       	ret
    1a72:	82 e0       	ldi	r24, 0x02	; 2
    1a74:	08 95       	ret
    1a76:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <gain_setting_int_cap+0x7f69ce>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	ed 91       	ld	r30, X+
    1a7e:	fc 91       	ld	r31, X
    1a80:	84 81       	ldd	r24, Z+4	; 0x04
    1a82:	80 31       	cpi	r24, 0x10	; 16
    1a84:	08 f0       	brcs	.+2      	; 0x1a88 <qtm_ptc_start_measurement_seq+0x90>
    1a86:	80 e1       	ldi	r24, 0x10	; 16
    1a88:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <gain_setting_int_cap+0x7f69d1>
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <gain_setting_int_cap+0x7f69d9>
    1a92:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <gain_setting_int_cap+0x7f69d8>
    1a96:	80 93 29 38 	sts	0x3829, r24	; 0x803829 <qtm_which_mode_current>
    1a9a:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <current_measure_channel>
    1a9e:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <current_measure_channel+0x1>
    1aa2:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <select_next_channel_to_measure>
    1aa6:	81 11       	cpse	r24, r1
    1aa8:	0b c0       	rjmp	.+22     	; 0x1ac0 <qtm_ptc_start_measurement_seq+0xc8>
    1aaa:	84 e0       	ldi	r24, 0x04	; 4
    1aac:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <touch_seq_lib_state>
    1ab0:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <current_measure_channel>
    1ab4:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <current_measure_channel+0x1>
    1ab8:	0e 94 a1 0a 	call	0x1542	; 0x1542 <qtm_measure_node>
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	08 95       	ret
    1ac0:	82 e0       	ldi	r24, 0x02	; 2
    1ac2:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <touch_seq_lib_state>
    1ac6:	08 95       	ret

00001ac8 <qtm_enable_sensor_node>:
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	c9 f0       	breq	.+50     	; 0x1afe <qtm_enable_sensor_node+0x36>
    1acc:	dc 01       	movw	r26, r24
    1ace:	ed 91       	ld	r30, X+
    1ad0:	fc 91       	ld	r31, X
    1ad2:	11 97       	sbiw	r26, 0x01	; 1
    1ad4:	20 81       	ld	r18, Z
    1ad6:	31 81       	ldd	r19, Z+1	; 0x01
    1ad8:	26 17       	cp	r18, r22
    1ada:	37 07       	cpc	r19, r23
    1adc:	90 f0       	brcs	.+36     	; 0x1b02 <qtm_enable_sensor_node+0x3a>
    1ade:	45 e0       	ldi	r20, 0x05	; 5
    1ae0:	46 9f       	mul	r20, r22
    1ae2:	90 01       	movw	r18, r0
    1ae4:	47 9f       	mul	r20, r23
    1ae6:	30 0d       	add	r19, r0
    1ae8:	11 24       	eor	r1, r1
    1aea:	14 96       	adiw	r26, 0x04	; 4
    1aec:	ed 91       	ld	r30, X+
    1aee:	fc 91       	ld	r31, X
    1af0:	15 97       	sbiw	r26, 0x05	; 5
    1af2:	e2 0f       	add	r30, r18
    1af4:	f3 1f       	adc	r31, r19
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	80 83       	st	Z, r24
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	08 95       	ret
    1afe:	8b e0       	ldi	r24, 0x0B	; 11
    1b00:	08 95       	ret
    1b02:	82 e0       	ldi	r24, 0x02	; 2
    1b04:	08 95       	ret

00001b06 <qtm_calibrate_sensor_node>:
    1b06:	fc 01       	movw	r30, r24
    1b08:	89 2b       	or	r24, r25
    1b0a:	d1 f1       	breq	.+116    	; 0x1b80 <qtm_calibrate_sensor_node+0x7a>
    1b0c:	a0 81       	ld	r26, Z
    1b0e:	b1 81       	ldd	r27, Z+1	; 0x01
    1b10:	8d 91       	ld	r24, X+
    1b12:	9c 91       	ld	r25, X
    1b14:	11 97       	sbiw	r26, 0x01	; 1
    1b16:	86 17       	cp	r24, r22
    1b18:	97 07       	cpc	r25, r23
    1b1a:	a0 f1       	brcs	.+104    	; 0x1b84 <qtm_calibrate_sensor_node+0x7e>
    1b1c:	12 96       	adiw	r26, 0x02	; 2
    1b1e:	9c 91       	ld	r25, X
    1b20:	04 80       	ldd	r0, Z+4	; 0x04
    1b22:	f5 81       	ldd	r31, Z+5	; 0x05
    1b24:	e0 2d       	mov	r30, r0
    1b26:	90 34       	cpi	r25, 0x40	; 64
    1b28:	59 f4       	brne	.+22     	; 0x1b40 <qtm_calibrate_sensor_node+0x3a>
    1b2a:	85 e0       	ldi	r24, 0x05	; 5
    1b2c:	86 9f       	mul	r24, r22
    1b2e:	d0 01       	movw	r26, r0
    1b30:	87 9f       	mul	r24, r23
    1b32:	b0 0d       	add	r27, r0
    1b34:	11 24       	eor	r1, r1
    1b36:	ae 0f       	add	r26, r30
    1b38:	bf 1f       	adc	r27, r31
    1b3a:	84 e3       	ldi	r24, 0x34	; 52
    1b3c:	92 e0       	ldi	r25, 0x02	; 2
    1b3e:	0d c0       	rjmp	.+26     	; 0x1b5a <qtm_calibrate_sensor_node+0x54>
    1b40:	90 58       	subi	r25, 0x80	; 128
    1b42:	92 30       	cpi	r25, 0x02	; 2
    1b44:	80 f4       	brcc	.+32     	; 0x1b66 <qtm_calibrate_sensor_node+0x60>
    1b46:	85 e0       	ldi	r24, 0x05	; 5
    1b48:	86 9f       	mul	r24, r22
    1b4a:	d0 01       	movw	r26, r0
    1b4c:	87 9f       	mul	r24, r23
    1b4e:	b0 0d       	add	r27, r0
    1b50:	11 24       	eor	r1, r1
    1b52:	ae 0f       	add	r26, r30
    1b54:	bf 1f       	adc	r27, r31
    1b56:	87 e6       	ldi	r24, 0x67	; 103
    1b58:	95 e0       	ldi	r25, 0x05	; 5
    1b5a:	13 96       	adiw	r26, 0x03	; 3
    1b5c:	8d 93       	st	X+, r24
    1b5e:	9c 93       	st	X, r25
    1b60:	14 97       	sbiw	r26, 0x04	; 4
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	01 c0       	rjmp	.+2      	; 0x1b68 <qtm_calibrate_sensor_node+0x62>
    1b66:	82 e0       	ldi	r24, 0x02	; 2
    1b68:	95 e0       	ldi	r25, 0x05	; 5
    1b6a:	96 9f       	mul	r25, r22
    1b6c:	90 01       	movw	r18, r0
    1b6e:	97 9f       	mul	r25, r23
    1b70:	30 0d       	add	r19, r0
    1b72:	11 24       	eor	r1, r1
    1b74:	e2 0f       	add	r30, r18
    1b76:	f3 1f       	adc	r31, r19
    1b78:	90 81       	ld	r25, Z
    1b7a:	92 60       	ori	r25, 0x02	; 2
    1b7c:	90 83       	st	Z, r25
    1b7e:	08 95       	ret
    1b80:	8b e0       	ldi	r24, 0x0B	; 11
    1b82:	08 95       	ret
    1b84:	82 e0       	ldi	r24, 0x02	; 2
    1b86:	08 95       	ret

00001b88 <qtm_t161x_ptc_handler_eoc>:
    1b88:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <gain_setting_int_cap+0x7f69ce>
    1b8c:	40 91 10 06 	lds	r20, 0x0610	; 0x800610 <gain_setting_int_cap+0x7f69de>
    1b90:	50 91 11 06 	lds	r21, 0x0611	; 0x800611 <gain_setting_int_cap+0x7f69df>
    1b94:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <current_measure_channel>
    1b98:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <current_measure_channel+0x1>
    1b9c:	9c 01       	movw	r18, r24
    1b9e:	22 0f       	add	r18, r18
    1ba0:	33 1f       	adc	r19, r19
    1ba2:	e0 91 62 38 	lds	r30, 0x3862	; 0x803862 <qtm_raw_data_measurements_ptr>
    1ba6:	f0 91 63 38 	lds	r31, 0x3863	; 0x803863 <qtm_raw_data_measurements_ptr+0x1>
    1baa:	e2 0f       	add	r30, r18
    1bac:	f3 1f       	adc	r31, r19
    1bae:	40 83       	st	Z, r20
    1bb0:	51 83       	std	Z+1, r21	; 0x01
    1bb2:	01 96       	adiw	r24, 0x01	; 1
    1bb4:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <current_measure_channel>
    1bb8:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <current_measure_channel+0x1>
    1bbc:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <select_next_channel_to_measure>
    1bc0:	81 11       	cpse	r24, r1
    1bc2:	09 c0       	rjmp	.+18     	; 0x1bd6 <qtm_t161x_ptc_handler_eoc+0x4e>
    1bc4:	84 e0       	ldi	r24, 0x04	; 4
    1bc6:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <touch_seq_lib_state>
    1bca:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <current_measure_channel>
    1bce:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <current_measure_channel+0x1>
    1bd2:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <qtm_measure_node>
    1bd6:	e0 91 39 38 	lds	r30, 0x3839	; 0x803839 <ptc_seq_measure_complete_pointer>
    1bda:	f0 91 3a 38 	lds	r31, 0x383A	; 0x80383a <ptc_seq_measure_complete_pointer+0x1>
    1bde:	09 94       	ijmp

00001be0 <_exit>:
    1be0:	f8 94       	cli

00001be2 <__stop_program>:
    1be2:	ff cf       	rjmp	.-2      	; 0x1be2 <__stop_program>
