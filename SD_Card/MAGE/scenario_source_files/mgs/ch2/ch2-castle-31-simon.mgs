include!("header.mgs")
const!($lightsdefault = ch2-serial-light-manager)

/* ---------- LOAD ---------- */

const! (
	$roundcount = 7

	$light0 = LED_BIT128
	$light1 = LED_BIT1
	$light2 = LED_PAGE
	$light3 = LED_MEM3
	$light4 = LED_XOR
	$light5 = LED_MEM0

	$button0 = BIT128 // bottom_left
	$button1 = BIT1 // bottom_right
	$button2 = PAGE // left
	$button3 = MEM3 // right
	$button4 = XOR // top left
	$button5 = MEM0 // top right

	$animation_padding1 = 50ms
	$animation_padding2 = 200ms
	$guitar_idle = 3
	$pose_pre_right = 4
	$pose_pre_left = 5
	$pose_top_right = 6
	$pose_right = 7
	$pose_bottom_right = 8
	$pose_top_left = 9
	$pose_left = 10
	$pose_bottom_left = 11
	$rocking = 12
)

simon-game-launcher {
	// turn hex control off
	set entity Simon on_tick to simon-game-start-q;
}

simon-game-start-q {
	set entity Simon current_animation to 12;
	if (flag ch2-simon-high is true) {
		show dialog {
			Simon emote 1 "How about it? Want a high battle?"
			> "Sure" : simon-game-start
			> "No, let's do a low battle" : simon-game-start-q-swap
			> "What's the difference?" : simon-game-start-difference
			> "Actually, never mind" : simon-game-start-nevermind
		}
	} else {
		show dialog {
			Simon emote 1 "How about it? Want a low battle?"
			> "Sure" : simon-game-start
			> "No, let's do a high battle" : simon-game-start-q-swap
			> "What's the difference?" : simon-game-start-difference
			> "Actually, never mind" : simon-game-start-nevermind
		}
	}
}
simon-game-start-q-swap {
	if (flag ch2-simon-high is true) {
		set flag ch2-simon-high to false;
		show dialog {
			Simon emote 1 "Oho, so you'd like a low battle?"
			> "Sure" : simon-game-start
			> "No, let's do a high battle" : simon-game-start-q-swap
			> "What's the difference?" : simon-game-start-difference
			> "Actually, never mind" : simon-game-start-nevermind

		}
	} else {
		set flag ch2-simon-high to true;
		show dialog {
			Simon emote 1 "I see, so you'd like a high battle?"
			> "Sure" : simon-game-start
			> "No, let's do a low battle" : simon-game-start-q-swap
			> "What's the difference?" : simon-game-start-difference
			> "Actually, never mind" : simon-game-start-nevermind
		}
	}
}

simon-game-start-difference {
	turn lights control on;
	turn light ALL off;
	set entity Simon current_animation to 0;
	show dialog {
		Simon "A HIGH battle is all about a full, square sound. Easier on the eyes but harder on the thumbs, if you get my meaning."
	}
	set entity Lights on_tick to screen-lights-flash-battle-high;
	show dialog {
		Simon "I'm talkin' about these lights up here, of course!"
	}
	set entity Lights on_tick to $lightsdefault;
	turn light ALL off;
	show dialog {
		Simon "A LOW battle is more about quick fingers. It's better for those who prefer to hold their destiny in their own two hands."
	}
	set entity Lights on_tick to screen-lights-flash-battle-low;
	show dialog {
		Simon "That means these lights down here, naturally!"
	}
	set entity Lights on_tick to $lightsdefault;
	copy ch2-map-init-hex;
	goto simon-game-start-q;
}

simon-game-start-nevermind {
	if (flag ch2-simon-won-before is false) {
		set entity Simon current_animation to 0;
		show dialog {
			Simon "Humph. Well, then I'm not trusting you with Rosetta! Come back when you can prove you deserve to have a keytar as gorgeous as this!"
		}
	} else {
		set entity Simon current_animation to 12;
		show dialog {
			Simon emote 1 "Well then, feel free to ask again anytime."
		}
	}
	set entity Simon current_animation to 0;
	goto simon-game-start-q-wrapup;
}

simon-game-start-q-wrapup {
	set entity Simon current_animation to 0;
	set entity Simon on_interact to interact-ch2-simon;
	goto null_script;
}

/*
Simon animations:
0: idle
1: rockin
2: become_relieved
3: shock_idle
4: relieved_laugh
5: headbang
6: pose_top_right
7: pose_right
8: pose_bottom_right
9: pose_top_left
10: pose_left
11: pose_bottom_left
12: happy_idle
13: pissed
*/

simon-game-start {
	turn player control off;
	turn hex control off;
	mutate simon-pos1 ? 4;
	mutate simon-pos2 ? 4;
	mutate simon-pos3 ? 4;
	mutate simon-pos4 ? 4;
	mutate simon-pos5 ? 4;
	mutate simon-pos6 ? 4;
	mutate simon-pos7 ? 4;
	if (flag ch2-simon-high is true) {
		mutate simon-pos1 + 2;
		mutate simon-pos2 + 2;
		mutate simon-pos3 + 2;
		mutate simon-pos4 + 2;
		mutate simon-pos5 + 2;
		mutate simon-pos6 + 2;
		mutate simon-pos7 + 2;
	}
	mutate simon-round = 1;
	turn lights control on;
	turn light ALL off;
	wait 100ms;
	fade out camera to black over 400ms;
	teleport camera to geometry camera-spot;
	teleport entity "%PLAYER%" to geometry mage-spot;
	teleport entity Simon to geometry simon-spot;
	set entity "%PLAYER%" current_animation to $guitar_idle;
	set entity Simon current_animation to 5;
	turn entity "%PLAYER%" south;
	turn entity Simon south;
	fade in camera from black over 400ms;
	if (flag ch2-simon-high is true) {
		set entity Lights on_tick to screen-lights-flash-battle-high;
		if (flag ch2-simon-heard-high is false) {
			show dialog {
				Simon emote 1 "Here we go! Keep your eyes up top!"
				"Pay attention to those four corners around the screen!"
				"Follow my lead! LET'S GOOOO!"
			}
			set flag ch2-simon-heard-high to true;
		} else {
			show dialog {
				Simon emote 1 "Keep your eyes up top and copy my moves! LET'S GOOOO!"
			}
		}
	} else {
		set entity Lights on_tick to screen-lights-flash-battle-low;
		if (flag ch2-simon-heard-low is false) {
			show dialog {
				Simon emote 1 "Here we go! Keep your eyes down low!"
				"It's the bottom of the screen that counts now! Keep your thumbs frisky!"
				"Follow my lead! LET'S GOOOO!"
			}
			set flag ch2-simon-heard-low to true;
		} else {
			show dialog {
				Simon emote 1 "Keep your eyes down low and copy my moves! LET'S GOOOO!"
			}
		}
	}
	set entity Lights on_tick to $lightsdefault;
	turn light ALL off;
	goto simon-enemy-turn-start;
}

simon-enemy-turn-start {
	set flag ch2-simon-move-fail to false;
	wait 800ms;
	for (mutate i = 0; variable i is < simon-round; mutate i + 1) {
		if (variable i is == 0) { mutate simon-pos-curr = simon-pos1; }
		else if (variable i is == 1) { mutate simon-pos-curr = simon-pos2; }
		else if (variable i is == 2) { mutate simon-pos-curr = simon-pos3; }
		else if (variable i is == 3) { mutate simon-pos-curr = simon-pos4; }
		else if (variable i is == 4) { mutate simon-pos-curr = simon-pos5; }
		else if (variable i is == 5) { mutate simon-pos-curr = simon-pos6; }
		else if (variable i is == 6) { mutate simon-pos-curr = simon-pos7; }
		// see $roundcount

		// loopy
		if (variable simon-pos-curr is == 0) {
			turn light $light0 on;
			set entity Simon current_animation to 11;
		}
		else if (variable simon-pos-curr is == 1) {
			turn light $light1 on;
			set entity Simon current_animation to 8;
		}
		else if (variable simon-pos-curr is == 2) {
			turn light $light2 on;
			set entity Simon current_animation to 10;
		}
		else if (variable simon-pos-curr is == 3) {
			turn light $light3 on;
			set entity Simon current_animation to 7;
		}
		else if (variable simon-pos-curr is == 4) {
			turn light $light4 on;
			set entity Simon current_animation to 9;
		}
		else if (variable simon-pos-curr is == 5) {
			turn light $light5 on;
			set entity Simon current_animation to 6;
		}
		wait 450ms;
		set entity Simon current_animation to 5;
		turn light ALL off;
		wait 150ms;
		
	}
	goto simon-player-turn-start;
}

simon-player-turn-start {
	wait 10ms;
	mutate i = 0;
	// turn player control on;
	goto simon-player-turn-loop-start;
}

simon-player-turn-loop-start {
	if (variable i is >= simon-round) {
		goto simon-player-turn-end;
	}
	if (variable i is == 0) { mutate simon-pos-curr = simon-pos1; }
	else if (variable i is == 1) { mutate simon-pos-curr = simon-pos2; }
	else if (variable i is == 2) { mutate simon-pos-curr = simon-pos3; }
	else if (variable i is == 3) { mutate simon-pos-curr = simon-pos4; }
	else if (variable i is == 4) { mutate simon-pos-curr = simon-pos5; }
	else if (variable i is == 5) { mutate simon-pos-curr = simon-pos6; }
	else if (variable i is == 6) { mutate simon-pos-curr = simon-pos7; }
	// see $roundcount

	// loopy
	goto simon-player-listen;
}

simon-player-listen {
	turn entity "%PLAYER%" south;
	// CHECK FAILS FIRST

	// high-only positions
	if (flag ch2-simon-high is true) {
		if (variable simon-pos-curr is not == 4) {
			if (button $button4) {
				// show serial dialog {"PRESSED BUTTON 4 (listening for $simon-pos-curr$)"}
				mutate simon-player-move = 4;
				set flag ch2-simon-move-fail to true;
				goto simon-player-do-move;
			}
		}
		if (variable simon-pos-curr is not == 5) {
			if (button $button5) {
				// show serial dialog {"PRESSED BUTTON 5 (listening for $simon-pos-curr$)"}
				mutate simon-player-move = 5;
				set flag ch2-simon-move-fail to true;
				goto simon-player-do-move;
			}
		}
	}
	// low-only positions
	else {
		if (variable simon-pos-curr is not == 0) {
			if (button $button0) {
				// show serial dialog {"PRESSED BUTTON 0 (listening for $simon-pos-curr$)"}
				mutate simon-player-move = 0;
				set flag ch2-simon-move-fail to true;
				goto simon-player-do-move;
			}
		}
		if (variable simon-pos-curr is not == 1) {
			if (button $button1) {
				// show serial dialog {"PRESSED BUTTON 1 (listening for $simon-pos-curr$)"}
				mutate simon-player-move = 1;
				set flag ch2-simon-move-fail to true;
				goto simon-player-do-move;
			}
		}
	}
	// positions for both low and high
	if (variable simon-pos-curr is not == 2) {
		if (button $button2) {
			// show serial dialog {"PRESSED BUTTON 2 (listening for $simon-pos-curr$)"}
			mutate simon-player-move = 2;
			set flag ch2-simon-move-fail to true;
			goto simon-player-do-move;
		}
	}
	if (variable simon-pos-curr is not == 3) {
		if (button $button3) {
			// show serial dialog {"PRESSED BUTTON 3 (listening for $simon-pos-curr$)"}
			mutate simon-player-move = 3;
			set flag ch2-simon-move-fail to true;
			goto simon-player-do-move;
		}
	}
	// (We don't want buttons not involved to trigger a fail)

	// CHECK SUCCESSES

	// high-only positions
	if (flag ch2-simon-high is true) {
		if (variable simon-pos-curr is == 4) {
			if (button $button4) {
				mutate simon-player-move = 4;
				goto simon-player-do-move;
			}
		}
		if (variable simon-pos-curr is == 5) {
			if (button $button5) {
				mutate simon-player-move = 5;
				goto simon-player-do-move;
			}
		}
	}
	// low-only positions
	else {
		if (variable simon-pos-curr is == 0) {
			if (button $button0) {
				mutate simon-player-move = 0;
				goto simon-player-do-move;
			}
		}
		if (variable simon-pos-curr is == 1) {
			if (button $button1) {
				mutate simon-player-move = 1;
				goto simon-player-do-move;
			}
		}
	}
	// positions for both low and high
	if (variable simon-pos-curr is == 2) {
		if (button $button2) {
			mutate simon-player-move = 2;
			goto simon-player-do-move;
		}
	}
	if (variable simon-pos-curr is == 3) {
		if (button $button3) {
			mutate simon-player-move = 3;
			goto simon-player-do-move;
		}
	}
	set entity Simon on_tick to simon-player-listen // reset this loop (on next game tick?)
}

simon-player-animation-pose_bottom_left {
	// set entity "%PLAYER%" current_animation to $pose_pre_left;
	// wait $animation_padding1;
	set entity "%PLAYER%" current_animation to $pose_bottom_left;
	goto simon-player-animation-pose_bottom_left-wait;
}
simon-player-animation-pose_bottom_right {
	// set entity "%PLAYER%" current_animation to $pose_pre_right;
	// wait $animation_padding1;
	set entity "%PLAYER%" current_animation to $pose_bottom_right;
	goto simon-player-animation-pose_bottom_right-wait;
}
simon-player-animation-pose_left {
	// set entity "%PLAYER%" current_animation to $pose_pre_left;
	// wait $animation_padding1;
	set entity "%PLAYER%" current_animation to $pose_left;
	goto simon-player-animation-pose_left-wait;
}
simon-player-animation-pose_right {
	// set entity "%PLAYER%" current_animation to $pose_pre_right;
	// wait $animation_padding1;
	set entity "%PLAYER%" current_animation to $pose_right;
	goto simon-player-animation-pose_right-wait;
}
simon-player-animation-pose_top_left {
	// set entity "%PLAYER%" current_animation to $pose_pre_left;
	// wait $animation_padding1;
	set entity "%PLAYER%" current_animation to $pose_top_left;
	goto simon-player-animation-pose_top_left-wait;
}
simon-player-animation-pose_top_right {
	// set entity "%PLAYER%" current_animation to $pose_pre_right;
	// wait $animation_padding1;
	set entity "%PLAYER%" current_animation to $pose_top_right;
	goto simon-player-animation-pose_top_right-wait;
}

simon-player-animation-pose_bottom_left-wait {
	if (button $button0 is not currently pressed) {
		set flag simon-player-wait-finished to true;
		goto null_script;
	}
}
simon-player-animation-pose_bottom_right-wait {
	if (button $button1 is not currently pressed) {
		set flag simon-player-wait-finished to true;
		goto null_script;
	}
}
simon-player-animation-pose_left-wait {
	if (button $button2 is not currently pressed) {
		set flag simon-player-wait-finished to true;
		goto null_script;
	}
}
simon-player-animation-pose_right-wait {
	if (button $button3 is not currently pressed) {
		set flag simon-player-wait-finished to true;
		goto null_script;
	}
}
simon-player-animation-pose_top_left-wait {
	if (button $button4 is not currently pressed) {
		set flag simon-player-wait-finished to true;
		goto null_script;
	}
}
simon-player-animation-pose_top_right-wait {
	if (button $button5 is not currently pressed) {
		set flag simon-player-wait-finished to true;
		goto null_script;
	}
}

simon-player-do-move {
	// loopy
	if (variable simon-player-move is == 0) {
		turn light $light0 on;
		set entity "%PLAYER%" on_tick to simon-player-animation-pose_bottom_left;
	}
	else if (variable simon-player-move is == 1) {
		turn light $light1 on;
		set entity "%PLAYER%" on_tick to simon-player-animation-pose_bottom_right;
	}
	else if (variable simon-player-move is == 2) {
		turn light $light2 on;
		set entity "%PLAYER%" on_tick to simon-player-animation-pose_left;
	}
	else if (variable simon-player-move is == 3) {
		turn light $light3 on;
		set entity "%PLAYER%" on_tick to simon-player-animation-pose_right;
	}
	else if (variable simon-player-move is == 4) {
		turn light $light4 on;
		set entity "%PLAYER%" on_tick to simon-player-animation-pose_top_left;
	}
	else if (variable simon-player-move is == 5) {
		turn light $light5 on;
		set entity "%PLAYER%" on_tick to simon-player-animation-pose_top_right;
	}
	goto simon-player-wait;
}
	
simon-player-wait {
	if (flag simon-player-wait-finished is true) {
		goto simon-player-wait-finished;
	}
}

simon-player-wait-finished {
	set flag simon-player-wait-finished to false;
	set entity "%PLAYER%" current_animation to $guitar_idle;
	turn light ALL off;
	mutate i + 1;
	// show serial dialog {
	// 	"YOUR MOVE WAS $simon-player-move$"
	// }
	if (flag ch2-simon-move-fail is true) {
		goto simon-game-lose;
	}
	goto simon-player-turn-loop-start;
}

simon-player-turn-end {
	mutate simon-round + 1;
	if (variable simon-round is > $roundcount) {
		goto simon-game-win;
	}
	goto simon-enemy-turn-start;
}

simon-game-lose {
	turn player control off;
	turn lights control on;
	set entity Keyboard on_tick to simon-rock;
	if (
		flag ch2-ring-zero-enabled-in-castle is true
		|| debug mode is on
	) {
		turn hex control on;
	}
	wait 100ms;
	set entity Lights on_tick to screen-lights-lose;
	set entity "%PLAYER%" on_tick to player-lose;
	show dialog { Simon emote 3 "Too bad! Better luck next time!" }
	set entity Lights on_tick to $lightsdefault;
	copy ch2-map-init-hex;
	turn player control on;
	set entity Keyboard on_tick to null_script;
	set entity Simon current_animation to 5;
	goto simon-game-go-again;
}

simon-game-win {
	turn player control off;
	turn lights control on;
	if (
		flag ch2-ring-zero-enabled-in-castle is true
		|| debug mode is on
	) {
		turn hex control on;
	}
	set entity Lights on_tick to screen-lights-win;
	set entity "%PLAYER%" on_tick to player-win;
	if (flag ch2-simon-won-before is false) {
		set entity Simon current_animation to 3;
		wait 500ms;
	}
	play entity Simon animation 2 once
	set entity Simon current_animation to 4;
	show dialog { Simon emote 3 "GREAT JOB! Way to go, kid!" }
	set entity Lights on_tick to $lightsdefault;
	copy ch2-map-init-hex;
	turn player control on;
	if (flag ch2-simon-won-before is false) {
		copy simon-game-restore-positions;
		set entity Simon current_animation to 12;
		show dialog {
			Simon emote 1 "HAHAH! That was a blast!"
			"THIS! This is what I was missing, the most important part about music!"
			PLAYER "What part?"
			Simon emote 1 "It's the MUSIC!"
			"Not the crowd, not the gigs, not the merch -- but the raw vibrations and rhythm!"
			"It's seizing something from the depths of your soul and shoving it into your hands, your breath, your fingertips --"
			"-- and making something LIVING, something that couldn't exist without you there to shape it!"
			"It's jamming with another human being, and building our sounds up together into something incredible!"
			"Who cares if no one was watching? What we did was ART!"
		}
		set entity Simon current_animation to 4;
		show dialog {
			Simon emote 3 "Fantastic!"
		}
		set entity Simon current_animation to 12;
		show dialog {
			Simon emote 1 "Don't worry, I'll keep my end of the bargain. Rosetta is yours now. You deserve it."
		}
		copy script ch2-hide-keyboard;
		show dialog {
			name "" "(You pick up the keyboard!)"
			Simon emote 1 "Keep it, and keep making awesome music!"
			PLAYER "Music, yeah. That is definitely what I was going to use it for. Yup."
		}
		set entity Simon current_animation to 12;
		set flag interrupt to true;
		copy script ch2-pickup-keyboard;
		set flag ch2-simon-won-before to true;
		goto null_script;
	} else {
		goto simon-game-go-again;
	}
}

simon-game-restore-positions {
	fade out camera to black over 400ms;
	make camera follow entity "%PLAYER%";
	set entity Simon current_animation to 0;
	set entity "%PLAYER%" current_animation to 0;
	teleport entity "%PLAYER%" to geometry return-spot;
	teleport entity Simon to geometry simon-return-spot;
	turn entity "%PLAYER%" north;
	fade in camera from black over 400ms;
}

simon-game-go-again {
	copy simon-game-restore-positions;
	set entity Simon current_animation to 12;
	show dialog {
		Simon emote 1 "Well? Wanna have another go?"
		> "Sure" : simon-game-go-again-yes
		> "No thanks" : simon-game-start-q-wrapup
	}
}

simon-game-go-again-yes {
	goto simon-game-start-q-reprise;
}

simon-game-start-q-reprise {
	if (flag ch2-simon-high is true) {
		show dialog {
			Simon emote 1 "Want another high battle?"
			> "Sure" : simon-game-start
			> "No, let's do a low battle" : simon-game-start-q-swap
			> "What's the difference?" : simon-game-start-difference
			> "Actually, never mind" : simon-game-start-nevermind

		}
	} else {
		show dialog {
			Simon emote 1 "Want another low battle?"
			> "Sure" : simon-game-start
			> "No, let's do a high battle" : simon-game-start-q-swap
			> "What's the difference?" : simon-game-start-difference
			> "Actually, never mind" : simon-game-start-nevermind
		}
	}
}

const! (
	$time = 200ms
	$time_q = 125ms
)

player-win {
	set entity "%PLAYER%" current_animation to $guitar_idle;
	turn entity "%PLAYER%" east;
	wait $time_q;
	turn entity "%PLAYER%" north;
	wait $time_q;
	turn entity "%PLAYER%" west;
	wait $time_q;
	turn entity "%PLAYER%" south;
	wait $time_q;
	set entity "%PLAYER%" current_animation to $rocking;
	goto null_script;
}
player-lose {
	set entity "%PLAYER%" current_animation to $guitar_idle;
	turn entity "%PLAYER%" west;
	wait $time_q;
	turn entity "%PLAYER%" east;
	wait $time_q;
	turn entity "%PLAYER%" west;
	wait $time_q;
	turn entity "%PLAYER%" east;
	wait $time_q;
	turn entity "%PLAYER%" south;
	goto null_script;
}

simon-rock {
	turn entity Simon west;
	play entity Simon animation 1 twice;
	turn entity Simon east;
	play entity Simon animation 1 twice;
}

screen-lights-bits {
	turn light LED_BIT1 on;
	turn light LED_BIT2 on;
	turn light LED_BIT4 on;
	turn light LED_BIT8 on;
	turn light LED_BIT16 on;
	turn light LED_BIT32 on;
	turn light LED_BIT64 on;
	turn light LED_BIT128 on;
}

screen-lights-flash-battle-low {
	turn light LED_BIT1 on;
	turn light LED_BIT128 on;
	turn light LED_PAGE on;
	turn light LED_MEM3 on;
	wait $time;
	turn light ALL off;
	wait $time;
}
screen-lights-flash-battle-high {
	turn light LED_MEM0 on;
	turn light LED_MEM3 on;
	turn light LED_XOR on;
	turn light LED_PAGE on;
	wait $time;
	turn light ALL off;
	wait $time;
}

screen-lights-lose {
	turn light ALL off;
	turn light LED_XOR on;
	turn light LED_MEM0 on;
	wait $time_q;

	turn light ALL off;
	turn light LED_ADD on;
	turn light LED_MEM1 on;
	wait $time_q;

	turn light ALL off;
	turn light LED_SUB on;
	turn light LED_MEM2 on;
	wait $time_q

	turn light ALL off;
	turn light LED_PAGE on;
	turn light LED_MEM3 on;
	wait $time_q;
	
	turn light ALL off;
	wait $time_q;

	copy screen-lights-bits;
	wait $time_q;
	
	turn light ALL off;
	wait $time_q;

	copy screen-lights-bits;
	wait $time;
	wait $time;

	turn light ALL off;

	goto null_script;
}

screen-lights-win {
	turn light ALL off;
	turn light LED_XOR on;
	turn light LED_PAGE on;
	turn light LED_BIT64 on;
	turn light LED_BIT8 on;
	turn light LED_BIT1 on;
	turn light LED_MEM2 on;
	wait $time;

	turn light ALL off;
	turn light LED_ADD on;
	turn light LED_BIT32 on;
	turn light LED_BIT4 on;
	turn light LED_MEM1 on;
	wait $time;

	turn light ALL off;
	turn light LED_SUB on;
	turn light LED_BIT128 on;
	turn light LED_BIT16 on;
	turn light LED_BIT2 on;
	turn light LED_MEM3 on;
	turn light LED_MEM0 on;
	wait $time;
}
